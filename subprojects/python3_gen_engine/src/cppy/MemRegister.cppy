<```
# -*-encoding:utf8-*-
>
<#
 此文件应当如下运行： 首先使用GenEngine生成字符串s
定义全局Output
 然后对每个reg_def, 调用exec(s, globals(),reg_def)

 exec的脚本必须提供： globasl含有out,  locals含有name,scale_type,volatile等
>


<```
from support import *

hasMultiFields = (len(fields)>1)
ori_fields=fields
fields=processedFields(ori_fields)
qualScaleType = scale_type
if volatile:
    qualScaleType = "volatile " + qualScaleType
>

class {name} {{
public:
<! cppy/generateFieldsDefinition.cppy >
<```
qualName = name
if volatile:
    qualName = "volatile " + qualName
if has_write:
>
<=++>
    AS_MACRO {name}({scale_type} v)            {{set(v);}}
    AS_MACRO {name}& operator=({scale_type} v) {{set(v);return *this;}}
    AS_MACRO void set({scale_type} v) {{ *reinterpret_cast<{scale_type}*>(this)=v;}}
<=-->
<```
else:
    qualName = "const " + name
>

<```
if has_read:
>
<=
indent=1;indentFmtStr=1;indentPyCode=1
>
<! cppy/generateFieldsDump.cppy >
<=
indent=0;indentFmtStr=0;indentPyCode=0
>

<```
if has_read:
>
<=++>
    AS_MACRO {scale_type}  get()const 
    {{
        return *reinterpret_cast<{scale_type}*>(this);
    }} 
    AS_MACRO static {qualName}& of(size_t addr)
    {{ 
        return *reinterpret_cast<{qualName}*>(addr);
    }}
    AS_MACRO static {qualName}& of(void* addr)
    {{ 
        return *reinterpret_cast<{qualName}*>(addr);
    }}
<```
if volatile:
>
<=++>
    AS_MACRO static {qualName}& of(volatile void * addr)
    {{
        return *reinterpret_cast<{qualName}*>(addr);
    }}
<=-->
<=-->

<! cppy/generateSetMandatoryFields.cppy >

}}__attribute__((packed));
