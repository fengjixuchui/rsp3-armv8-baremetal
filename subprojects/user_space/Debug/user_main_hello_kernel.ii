# 1 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/user_space/user_main_hello_kernel.cpp"
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\subprojects\\user_space\\Debug//"
# 1 "<built-in>"
#define __STDC__ 1
#define __cplusplus 201402L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 0
#define __GNUC__ 7
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "7.2.1 20171011"
#define __LINARO_RELEASE__ 201711
#define __LINARO_SPIN__ 0
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define _LP64 1
#define __LP64__ 1
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 8
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 16
#define __SIZEOF_SIZE_T__ 8
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 8
#define __GNUG__ 7
#define __SIZE_TYPE__ long unsigned int
#define __PTRDIFF_TYPE__ long int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long int
#define __UINTMAX_TYPE__ long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long unsigned int
#define __INTPTR_TYPE__ long int
#define __UINTPTR_TYPE__ long unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_WEAK__ 1
#define __DEPRECATED 1
#define __GXX_EXPERIMENTAL_CXX0X__ 1
#define __cpp_binary_literals 201304
#define __cpp_unicode_characters 200704
#define __cpp_raw_strings 200710
#define __cpp_unicode_literals 200710
#define __cpp_user_defined_literals 200809
#define __cpp_lambdas 200907
#define __cpp_range_based_for 200907
#define __cpp_static_assert 200410
#define __cpp_decltype 200707
#define __cpp_attributes 200809
#define __cpp_rvalue_reference 200610
#define __cpp_rvalue_references 200610
#define __cpp_variadic_templates 200704
#define __cpp_initializer_lists 200806
#define __cpp_delegating_constructors 200604
#define __cpp_nsdmi 200809
#define __cpp_inheriting_constructors 201511
#define __cpp_ref_qualifiers 200710
#define __cpp_alias_templates 200704
#define __cpp_return_type_deduction 201304
#define __cpp_init_captures 201304
#define __cpp_generic_lambdas 201304
#define __cpp_constexpr 201304
#define __cpp_decltype_auto 201304
#define __cpp_aggregate_nsdmi 201304
#define __cpp_variable_templates 201304
#define __cpp_digit_separators 201309
#define __cpp_sized_deallocation 201309
#define __cpp_threadsafe_static_init 200806
#define __GXX_ABI_VERSION 1011
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffffffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffffffffffffL
#define __SIZE_MAX__ 0xffffffffffffffffUL
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 64
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 64
#define __SIZE_WIDTH__ 64
#define __INTMAX_MAX__ 0x7fffffffffffffffL
#define __INTMAX_C(c) c ## L
#define __UINTMAX_MAX__ 0xffffffffffffffffUL
#define __UINTMAX_C(c) c ## UL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffff
#define __INT64_MAX__ 0x7fffffffffffffffL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffU
#define __UINT64_MAX__ 0xffffffffffffffffUL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __INT32_C(c) c
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffL
#define __INT64_C(c) c ## L
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
#define __UINT64_C(c) c ## UL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffUL
#define __INTPTR_MAX__ 0x7fffffffffffffffL
#define __INTPTR_WIDTH__ 64
#define __UINTPTR_MAX__ 0xffffffffffffffffUL
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ double(1.79769313486231570814527423731704357e+308L)
#define __DBL_MIN__ double(2.22507385850720138309023271733240406e-308L)
#define __DBL_EPSILON__ double(2.22044604925031308084726333618164062e-16L)
#define __DBL_DENORM_MIN__ double(4.94065645841246544176568792868221372e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMA 1
#define __LDBL_MANT_DIG__ 113
#define __LDBL_DIG__ 33
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 36
#define __LDBL_DECIMAL_DIG__ 36
#define __LDBL_MAX__ 1.18973149535723176508575932662800702e+4932L
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
#define __LDBL_EPSILON__ 1.92592994438723585305597794258492732e-34L
#define __LDBL_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT16_MANT_DIG__ 11
#define __FLT16_DIG__ 3
#define __FLT16_MIN_EXP__ (-13)
#define __FLT16_MIN_10_EXP__ (-4)
#define __FLT16_MAX_EXP__ 16
#define __FLT16_MAX_10_EXP__ 4
#define __FLT16_DECIMAL_DIG__ 5
#define __FLT16_MAX__ 6.55040000000000000000000000000000000e+4F16
#define __FLT16_MIN__ 6.10351562500000000000000000000000000e-5F16
#define __FLT16_EPSILON__ 9.76562500000000000000000000000000000e-4F16
#define __FLT16_DENORM_MIN__ 5.96046447753906250000000000000000000e-8F16
#define __FLT16_HAS_DENORM__ 1
#define __FLT16_HAS_INFINITY__ 1
#define __FLT16_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT128_MANT_DIG__ 113
#define __FLT128_DIG__ 33
#define __FLT128_MIN_EXP__ (-16381)
#define __FLT128_MIN_10_EXP__ (-4931)
#define __FLT128_MAX_EXP__ 16384
#define __FLT128_MAX_10_EXP__ 4932
#define __FLT128_DECIMAL_DIG__ 36
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
#define __FLT128_HAS_DENORM__ 1
#define __FLT128_HAS_INFINITY__ 1
#define __FLT128_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __FLT64X_MANT_DIG__ 113
#define __FLT64X_DIG__ 33
#define __FLT64X_MIN_EXP__ (-16381)
#define __FLT64X_MIN_10_EXP__ (-4931)
#define __FLT64X_MAX_EXP__ 16384
#define __FLT64X_MAX_10_EXP__ 4932
#define __FLT64X_DECIMAL_DIG__ 36
#define __FLT64X_MAX__ 1.18973149535723176508575932662800702e+4932F64x
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
#define __FLT64X_EPSILON__ 1.92592994438723585305597794258492732e-34F64x
#define __FLT64X_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F64x
#define __FLT64X_HAS_DENORM__ 1
#define __FLT64X_HAS_INFINITY__ 1
#define __FLT64X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __NO_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __WCHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_INT128__ 16
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 8
#define __aarch64__ 1
#define __ARM_64BIT_STATE 1
#define __ARM_ARCH_ISA_A64 1
#define __ARM_ALIGN_MAX_PWR 28
#define __ARM_ALIGN_MAX_STACK_PWR 16
#define __ARM_ARCH_8A 1
#define __ARM_ARCH_PROFILE 65
#define __ARM_FEATURE_CLZ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_FEATURE_UNALIGNED 1
#define __ARM_PCS_AAPCS64 1
#define __ARM_SIZEOF_WCHAR_T 4
#undef __ARM_FP_FAST
# 1 "<built-in>"
#define __ARM_ARCH 8
#define __ARM_SIZEOF_MINIMAL_ENUM 4
#undef __AARCH64EB__
# 1 "<built-in>"
#undef __ARM_BIG_ENDIAN
# 1 "<built-in>"
#define __AARCH64EL__ 1
#define __ARM_FEATURE_FMA 1
#define __ARM_FP 14
#define __ARM_FP16_FORMAT_IEEE 1
#define __ARM_FP16_ARGS 1
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 1 "<built-in>"
#define __ARM_FEATURE_NUMERIC_MAXMIN 1
#define __ARM_NEON 1
#define __ARM_FEATURE_CRC32 1
#undef __AARCH64_CMODEL_TINY__
# 1 "<built-in>"
#undef __AARCH64_CMODEL_SMALL__
# 1 "<built-in>"
#undef __AARCH64_CMODEL_LARGE__
# 1 "<built-in>"
#define __AARCH64_CMODEL_SMALL__ 1
#undef _ILP32
# 1 "<built-in>"
#undef __ILP32__
# 1 "<built-in>"
#undef __ARM_FEATURE_CRYPTO
# 1 "<built-in>"
#define __ARM_FEATURE_QRDMX 1
#undef __FLT_EVAL_METHOD__
# 1 "<built-in>"
#define __FLT_EVAL_METHOD__ 0
#undef __FLT_EVAL_METHOD_C99__
# 1 "<built-in>"
#define __FLT_EVAL_METHOD_C99__ 0
#define __ELF__ 1
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "./cxx_macros.h" 1


#define CXX_MACROS_H__ 

#define TARGET_ARCH_IS_user_space 
# 32 "<command-line>" 2
# 1 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/user_space/user_main_hello_kernel.cpp"

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/svc_call.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/svc_call.h"
#define INCLUDE_EXCEPTION_SVC_CALL_H_ 
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h"
#define INCLUDE_ARCH_COMMON_AARCH64_EXCEPTIONS_H_ 
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h" 1


#define DEF_H__ 




# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 1 3
# 40 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 3
#define _GLIBCXX_CSTDDEF 1

       
# 43 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 3

#undef __need_wchar_t
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_NULL
#undef __need_wint_t
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_CXX_CONFIG_H 1


#define _GLIBCXX_RELEASE 7


#define __GLIBCXX__ 20171011
# 46 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_PURE __attribute__ ((__pure__))



#define _GLIBCXX_CONST __attribute__ ((__const__))



#define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))
# 67 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1


#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))
# 81 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_DEPRECATED 1



#define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))






#define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ ("cxx11")))
# 101 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_CONSTEXPR constexpr
#define _GLIBCXX_USE_CONSTEXPR constexpr
# 111 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX14_CONSTEXPR constexpr
# 121 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX17_CONSTEXPR 







#define _GLIBCXX17_INLINE 






#define _GLIBCXX_NOEXCEPT noexcept
#define _GLIBCXX_NOEXCEPT_IF(_COND) noexcept(_COND)
#define _GLIBCXX_USE_NOEXCEPT noexcept
#define _GLIBCXX_THROW(_EXC) 
# 149 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT






#define _GLIBCXX_THROW_OR_ABORT(_EXC) (__builtin_abort())







#define _GLIBCXX_NOEXCEPT_PARM 
#define _GLIBCXX_NOEXCEPT_QUAL 
# 178 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_EXTERN_TEMPLATE 1
# 229 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3

# 229 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}

#define _GLIBCXX_USE_DUAL_ABI 1







#define _GLIBCXX_USE_CXX11_ABI 1



namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
#define _GLIBCXX_NAMESPACE_CXX11 __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {
#define _GLIBCXX_END_NAMESPACE_CXX11 }
#define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11
# 272 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_INLINE_VERSION 0
# 330 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION 
#define _GLIBCXX_END_NAMESPACE_VERSION 
# 403 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STD_C std
#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER _GLIBCXX_BEGIN_NAMESPACE_VERSION
#define _GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX_END_NAMESPACE_VERSION
# 415 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STD_A std
#define _GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX_BEGIN_NAMESPACE_VERSION
#define _GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX_END_NAMESPACE_VERSION




#undef _GLIBCXX_LONG_DOUBLE_COMPAT
# 434 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_NAMESPACE_LDBL 
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL 
#define _GLIBCXX_END_NAMESPACE_LDBL 


#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11
# 487 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define __glibcxx_assert(_Condition) 
# 512 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) 


#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) 



#define _GLIBCXX_BEGIN_EXTERN_C extern "C" {
#define _GLIBCXX_END_EXTERN_C }

#define _GLIBCXX_USE_ALLOCATOR_NEW 1
# 533 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\os_defines.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\os_defines.h" 3
#define _GLIBCXX_OS_DEFINES 1
# 534 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 2 3


# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\cpu_defines.h" 1 3
# 31 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\cpu_defines.h" 3
#define _GLIBCXX_CPU_DEFINES 1
# 537 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 2 3




#define _GLIBCXX_PSEUDO_VISIBILITY(V) 






#define _GLIBCXX_WEAK_DEFINITION 







#define _GLIBCXX_USE_WEAK_REF __GXX_WEAK__
# 569 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_TXN_SAFE 
#define _GLIBCXX_TXN_SAFE_DYN 
# 588 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_FAST_MATH 0






#define __N(msgid) (msgid)


#undef min
#undef max





#define _GLIBCXX_USE_C99_MATH _GLIBCXX11_USE_C99_MATH


#define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX11_USE_C99_COMPLEX


#define _GLIBCXX_USE_C99_STDIO _GLIBCXX11_USE_C99_STDIO


#define _GLIBCXX_USE_C99_STDLIB _GLIBCXX11_USE_C99_STDLIB


#define _GLIBCXX_USE_C99_WCHAR _GLIBCXX11_USE_C99_WCHAR
# 642 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ACOSF 1
# 651 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ASINF 1





#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1


#define _GLIBCXX_HAVE_ATAN2F 1





#define _GLIBCXX_HAVE_ATANF 1
# 678 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_CEILF 1





#define _GLIBCXX_HAVE_COMPLEX_H 1


#define _GLIBCXX_HAVE_COSF 1


#define _GLIBCXX_HAVE_COSHF 1
# 705 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_EBADMSG 1


#define _GLIBCXX_HAVE_ECANCELED 1


#define _GLIBCXX_HAVE_ECHILD 1


#define _GLIBCXX_HAVE_EIDRM 1





#define _GLIBCXX_HAVE_ENODATA 1


#define _GLIBCXX_HAVE_ENOLINK 1


#define _GLIBCXX_HAVE_ENOSPC 1


#define _GLIBCXX_HAVE_ENOSR 1


#define _GLIBCXX_HAVE_ENOSTR 1


#define _GLIBCXX_HAVE_ENOTRECOVERABLE 1


#define _GLIBCXX_HAVE_ENOTSUP 1


#define _GLIBCXX_HAVE_EOVERFLOW 1


#define _GLIBCXX_HAVE_EOWNERDEAD 1


#define _GLIBCXX_HAVE_EPERM 1


#define _GLIBCXX_HAVE_EPROTO 1


#define _GLIBCXX_HAVE_ETIME 1


#define _GLIBCXX_HAVE_ETIMEDOUT 1


#define _GLIBCXX_HAVE_ETXTBSY 1


#define _GLIBCXX_HAVE_EWOULDBLOCK 1
# 771 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_EXPF 1





#define _GLIBCXX_HAVE_FABSF 1





#define _GLIBCXX_HAVE_FCNTL_H 1
# 798 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_FLOAT_H 1


#define _GLIBCXX_HAVE_FLOORF 1





#define _GLIBCXX_HAVE_FMODF 1
# 819 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_FREXPF 1





#define _GLIBCXX_HAVE_GETIPINFO 1


#define _GLIBCXX_HAVE_GETS 1


#define _GLIBCXX_HAVE_HYPOT 1
# 840 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ICONV 1


#define _GLIBCXX_HAVE_IEEEFP_H 1


#define _GLIBCXX_HAVE_INT64_T 1


#define _GLIBCXX_HAVE_INT64_T_LONG 1





#define _GLIBCXX_HAVE_INTTYPES_H 1
# 876 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_ISWBLANK 1


#define _GLIBCXX_HAVE_LC_MESSAGES 1


#define _GLIBCXX_HAVE_LDEXPF 1
# 891 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_LIMIT_AS 0


#define _GLIBCXX_HAVE_LIMIT_DATA 0


#define _GLIBCXX_HAVE_LIMIT_FSIZE 0


#define _GLIBCXX_HAVE_LIMIT_RSS 0


#define _GLIBCXX_HAVE_LIMIT_VMEM 0





#define _GLIBCXX_HAVE_LOCALE_H 1


#define _GLIBCXX_HAVE_LOG10F 1





#define _GLIBCXX_HAVE_LOGF 1





#define _GLIBCXX_HAVE_MACHINE_ENDIAN_H 1


#define _GLIBCXX_HAVE_MACHINE_PARAM_H 1


#define _GLIBCXX_HAVE_MBSTATE_T 1


#define _GLIBCXX_HAVE_MEMALIGN 1


#define _GLIBCXX_HAVE_MEMORY_H 1





#define _GLIBCXX_HAVE_MODFF 1
# 963 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_POWF 1
# 987 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SINF 1


#define _GLIBCXX_HAVE_SINHF 1
# 999 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SLEEP 1


#define _GLIBCXX_HAVE_SQRTF 1





#define _GLIBCXX_HAVE_STDALIGN_H 1


#define _GLIBCXX_HAVE_STDBOOL_H 1


#define _GLIBCXX_HAVE_STDINT_H 1


#define _GLIBCXX_HAVE_STDLIB_H 1





#define _GLIBCXX_HAVE_STRERROR_R 1


#define _GLIBCXX_HAVE_STRINGS_H 1


#define _GLIBCXX_HAVE_STRING_H 1


#define _GLIBCXX_HAVE_STRTOF 1
# 1063 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SYS_PARAM_H 1


#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1
# 1078 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_SYS_STAT_H 1





#define _GLIBCXX_HAVE_SYS_TIME_H 1


#define _GLIBCXX_HAVE_SYS_TYPES_H 1
# 1096 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_S_ISREG 1


#define _GLIBCXX_HAVE_TANF 1


#define _GLIBCXX_HAVE_TANHF 1
# 1111 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_TGMATH_H 1
# 1120 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_HAVE_UNISTD_H 1


#define _GLIBCXX_HAVE_USLEEP 1


#define _GLIBCXX_HAVE_UTIME_H 1


#define _GLIBCXX_HAVE_VFWSCANF 1


#define _GLIBCXX_HAVE_VSWSCANF 1


#define _GLIBCXX_HAVE_VWSCANF 1


#define _GLIBCXX_HAVE_WCHAR_H 1


#define _GLIBCXX_HAVE_WCSTOF 1


#define _GLIBCXX_HAVE_WCTYPE_H 1
# 1352 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define LT_OBJDIR ".libs/"





#define _GLIBCXX_PACKAGE_BUGREPORT ""


#define _GLIBCXX_PACKAGE_NAME "package-unused"


#define _GLIBCXX_PACKAGE_STRING "package-unused version-unused"


#define _GLIBCXX_PACKAGE_TARNAME "libstdc++"


#define _GLIBCXX_PACKAGE_URL ""


#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION "version-unused"
# 1391 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define STDC_HEADERS 1
# 1403 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX11_USE_C99_MATH 1



#define _GLIBCXX11_USE_C99_STDIO 1



#define _GLIBCXX11_USE_C99_STDLIB 1



#define _GLIBCXX11_USE_C99_WCHAR 1
# 1424 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX98_USE_C99_MATH 1



#define _GLIBCXX98_USE_C99_STDIO 1



#define _GLIBCXX98_USE_C99_STDLIB 1



#define _GLIBCXX98_USE_C99_WCHAR 1


#define _GLIBCXX_ATOMIC_BUILTINS 1






#define _GLIBCXX_FULLY_DYNAMIC_STRING 0





#define _GLIBCXX_HOSTED 1




#define _GLIBCXX_MANGLE_SIZE_T m
# 1472 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_STDIO_EOF -1


#define _GLIBCXX_STDIO_SEEK_CUR 1


#define _GLIBCXX_STDIO_SEEK_END 2
# 1510 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_C99_CTYPE_TR1 1







#define _GLIBCXX_USE_C99_INTTYPES_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1







#define _GLIBCXX_USE_C99_STDINT_TR1 1
# 1547 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_FCHMOD 1


#define _GLIBCXX_USE_FCHMODAT 1





#define _GLIBCXX_USE_GETTIMEOFDAY 1





#define _GLIBCXX_USE_INT128 1





#define _GLIBCXX_USE_LONG_LONG 1
# 1593 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1
# 1608 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\aarch64-elf\\bits\\c++config.h" 3
#define _GLIBCXX_USE_TMPNAM 1






#define _GLIBCXX_USE_WCHAR_T 1


#define _GLIBCXX_VERBOSE 1





#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
# 50 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 2 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 1 3 4
# 39 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef long int ptrdiff_t;
# 161 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 187 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 





typedef long unsigned int size_t;
# 238 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 267 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 347 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef NULL

#define NULL __null
# 412 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stddef.h" 3 4
} max_align_t;





#define _GXX_NULLPTR_T 
  typedef decltype(nullptr) nullptr_t;
# 51 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h" 2
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 1 3
# 30 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
#define _GLIBCXX_CSTDINT 1

       
# 33 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
# 41 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 3
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 1 3 4
# 11 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 3 4
# 1 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint-gcc.h" 1 3 4
# 29 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint-gcc.h" 3 4
#define _GCC_STDINT_H 




typedef signed char int8_t;


typedef short int int16_t;


typedef int int32_t;


typedef long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef unsigned int uint32_t;


typedef long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long unsigned int uint_fast64_t;




typedef long int intptr_t;


typedef long unsigned int uintptr_t;




typedef long int intmax_t;
typedef long unsigned int uintmax_t;







#undef INT8_MAX
#define INT8_MAX __INT8_MAX__
#undef INT8_MIN
#define INT8_MIN (-INT8_MAX - 1)


#undef UINT8_MAX
#define UINT8_MAX __UINT8_MAX__


#undef INT16_MAX
#define INT16_MAX __INT16_MAX__
#undef INT16_MIN
#define INT16_MIN (-INT16_MAX - 1)


#undef UINT16_MAX
#define UINT16_MAX __UINT16_MAX__


#undef INT32_MAX
#define INT32_MAX __INT32_MAX__
#undef INT32_MIN
#define INT32_MIN (-INT32_MAX - 1)


#undef UINT32_MAX
#define UINT32_MAX __UINT32_MAX__


#undef INT64_MAX
#define INT64_MAX __INT64_MAX__
#undef INT64_MIN
#define INT64_MIN (-INT64_MAX - 1)


#undef UINT64_MAX
#define UINT64_MAX __UINT64_MAX__


#undef INT_LEAST8_MAX
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#undef INT_LEAST8_MIN
#define INT_LEAST8_MIN (-INT_LEAST8_MAX - 1)
#undef UINT_LEAST8_MAX
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__
#undef INT_LEAST16_MAX
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#undef INT_LEAST16_MIN
#define INT_LEAST16_MIN (-INT_LEAST16_MAX - 1)
#undef UINT_LEAST16_MAX
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__
#undef INT_LEAST32_MAX
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#undef INT_LEAST32_MIN
#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)
#undef UINT_LEAST32_MAX
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__
#undef INT_LEAST64_MAX
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#undef INT_LEAST64_MIN
#define INT_LEAST64_MIN (-INT_LEAST64_MAX - 1)
#undef UINT_LEAST64_MAX
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__

#undef INT_FAST8_MAX
#define INT_FAST8_MAX __INT_FAST8_MAX__
#undef INT_FAST8_MIN
#define INT_FAST8_MIN (-INT_FAST8_MAX - 1)
#undef UINT_FAST8_MAX
#define UINT_FAST8_MAX __UINT_FAST8_MAX__
#undef INT_FAST16_MAX
#define INT_FAST16_MAX __INT_FAST16_MAX__
#undef INT_FAST16_MIN
#define INT_FAST16_MIN (-INT_FAST16_MAX - 1)
#undef UINT_FAST16_MAX
#define UINT_FAST16_MAX __UINT_FAST16_MAX__
#undef INT_FAST32_MAX
#define INT_FAST32_MAX __INT_FAST32_MAX__
#undef INT_FAST32_MIN
#define INT_FAST32_MIN (-INT_FAST32_MAX - 1)
#undef UINT_FAST32_MAX
#define UINT_FAST32_MAX __UINT_FAST32_MAX__
#undef INT_FAST64_MAX
#define INT_FAST64_MAX __INT_FAST64_MAX__
#undef INT_FAST64_MIN
#define INT_FAST64_MIN (-INT_FAST64_MAX - 1)
#undef UINT_FAST64_MAX
#define UINT_FAST64_MAX __UINT_FAST64_MAX__


#undef INTPTR_MAX
#define INTPTR_MAX __INTPTR_MAX__
#undef INTPTR_MIN
#define INTPTR_MIN (-INTPTR_MAX - 1)


#undef UINTPTR_MAX
#define UINTPTR_MAX __UINTPTR_MAX__


#undef INTMAX_MAX
#define INTMAX_MAX __INTMAX_MAX__
#undef INTMAX_MIN
#define INTMAX_MIN (-INTMAX_MAX - 1)
#undef UINTMAX_MAX
#define UINTMAX_MAX __UINTMAX_MAX__



#undef PTRDIFF_MAX
#define PTRDIFF_MAX __PTRDIFF_MAX__
#undef PTRDIFF_MIN
#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)

#undef SIG_ATOMIC_MAX
#define SIG_ATOMIC_MAX __SIG_ATOMIC_MAX__
#undef SIG_ATOMIC_MIN
#define SIG_ATOMIC_MIN __SIG_ATOMIC_MIN__

#undef SIZE_MAX
#define SIZE_MAX __SIZE_MAX__

#undef WCHAR_MAX
#define WCHAR_MAX __WCHAR_MAX__
#undef WCHAR_MIN
#define WCHAR_MIN __WCHAR_MIN__

#undef WINT_MAX
#define WINT_MAX __WINT_MAX__
#undef WINT_MIN
#define WINT_MIN __WINT_MIN__







#undef INT8_C
#define INT8_C(c) __INT8_C(c)
#undef INT16_C
#define INT16_C(c) __INT16_C(c)
#undef INT32_C
#define INT32_C(c) __INT32_C(c)
#undef INT64_C
#define INT64_C(c) __INT64_C(c)
#undef UINT8_C
#define UINT8_C(c) __UINT8_C(c)
#undef UINT16_C
#define UINT16_C(c) __UINT16_C(c)
#undef UINT32_C
#define UINT32_C(c) __UINT32_C(c)
#undef UINT64_C
#define UINT64_C(c) __UINT64_C(c)
#undef INTMAX_C
#define INTMAX_C(c) __INTMAX_C(c)
#undef UINTMAX_C
#define UINTMAX_C(c) __UINTMAX_C(c)
# 12 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\lib\\gcc\\aarch64-elf\\7.2.1\\include\\stdint.h" 2 3 4

#define _GCC_WRAP_STDINT_H 
# 42 "d:\\installed\\gcc-linaro-7.2.1-2017.11-i686-mingw32_aarch64-elf\\aarch64-elf\\include\\c++\\7.2.1\\cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 10 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h" 2

#define AS_MACRO __attribute__((always_inline)) inline
#define arrsizeof(arr) (sizeof(arr)/sizeof(arr[0]))
#define NULL_CHAR '\0'


#define INFO "[INFO] "
#define WARNING "[WARNING] "
#define FATAL "[FATAL] "




# 22 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/def.h"
extern const char EMPTY_STR[1];



constexpr int UNIT_K=1024;
constexpr int KiB = UNIT_K;
constexpr int MiB = UNIT_K * KiB;
constexpr int GiB = UNIT_K * MiB;


#define TIE2(t1,v1,t2,v2) t1 v1;t2 v2;std::tie((v1),(v2))




#define __stringify_1(x) #x
#define __stringify(x) __stringify_1(x)
#define CALL_CONST_EQUIV(var,method) const_cast<std::remove_const<decltype(((var)->method))>>(reinterpret_cast<const decltype(var) *>(var)->method)






#define HEX32(a,b) 0x ##a ##b
#define HEX64(a,b,c,d) 0x ##a ##b ##c ##d


#define BIN32(a,bb,c,d) 0b ##a ##bb ##c ##d
#define BIN64(a,bb,c,d,e,f,g,h) 0b ##a ##bb ##c ##d ##e ##f ##g ##h
# 11 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/asm_instructions.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/asm_instructions.h"
#define INCLUDE_ASM_INSTRUCTIONS_H_ 


# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/system_common_registers.h" 1



#define _________INCLUDE_ARCH_COMMON_AARCH64_SYSTEM_COMMON_REGISTERS_H__ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define INCLUDE_ARCH_COMMON_AARCH64_SYSTEM_REGISTERS_BASE_H_ 



# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/kernel.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/kernel.h"
#define INCLUDE_KERNEL_H_ 
# 14 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h"
#define INCLUDE_INTEGERINTEGERFORMATTER_H_ 


# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/Output.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/Output.h"
#define INCLUDE_IO_OUTPUT_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h"
#define INCLUDE_IO_PRINTK_H_ 




size_t printk(char ch);


size_t printk(const char *s);

size_t printk(const char *s,size_t n);


void flush();




# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/printk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/printk.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_PRINTK_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/printk.h" 2
# 28 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/printk.h" 2
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/io/Output.h" 2

class Output{
public:
 size_t print(const char *s,size_t len);
 size_t print(const char *s);
 Output & operator<<(char ch);

 Output & operator<<(uint8_t u);
 Output & operator<<(uint16_t u);
 Output & operator<<(uint32_t u);
 Output & operator<<(bool i);
 Output & operator<<(short i);
 Output & operator<<(int i);
 Output & operator<<(double d);
 Output & operator<<(const char *s);
 Output & operator<<(size_t i);
 Output & operator<<(const void *p);
 Output & operator<<(const volatile void *p);
 Output & flush();
};


extern Output kout;


constexpr size_t koutBufSize = 65;
extern char koutBuf[koutBufSize];
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 2


template <int Base>
class IntegerFormatter{
public:
 IntegerFormatter(size_t num);
 IntegerFormatter(const void *p);
 char *format()const;
private:
 size_t num;
};


using Hex=IntegerFormatter<16>;
using Dec=IntegerFormatter<10>;
using Bin=IntegerFormatter<2>;

template <int Base>
Output & operator<<(Output & out,const IntegerFormatter<Base> &hf);



# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_INTEGERFORMATTER_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/generic_util.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/generic_util.h"
#define INCLUDE_GENERIC_UTIL_H_ 




void delayCPU(size_t i);
void delayCPU(size_t i,size_t j);
void haltCPU();





extern const char digitsMap[];



size_t itob(size_t i,char *dst,size_t size);
size_t itod(size_t i,char *dst,size_t size);
size_t itox(size_t i,char *dst,size_t size);

size_t itos(size_t i,unsigned int base,char *dst,size_t size);


uint64_t alignNext(uint64_t d,uint64_t alignment);
uint64_t alignPrevious(uint64_t d,uint64_t alignment);





void reverse(char *str,size_t size);



const char *strOffset(const char *p,size_t offset);







__attribute__((always_inline)) inline uint64_t upperMaskBits(uint64_t i)
{
 return 0xffffffffffffffff >> (64-i) << (64-i);
}

__attribute__((always_inline)) inline uint64_t lowerMaskBits(uint64_t i)
{
 return 0xffffffffffffffff << (64-i) >> (64-i);
}
__attribute__((always_inline)) inline uint64_t middleMaskBits(uint64_t lowerBound,uint64_t upperBound)
{

 return 0xffffffffffffffff >> lowerBound << (64 - upperBound - 1 + lowerBound) >> (64-upperBound -1);
}


template <class Type,class ValueType>
__attribute__((always_inline)) inline void setBits(Type & i, uint8_t lowerBound,uint8_t upperBound,ValueType v)
{

 i = (i & (~middleMaskBits(lowerBound, upperBound))) |((v & lowerMaskBits(upperBound - lowerBound + 1))<<lowerBound );
}
__attribute__((always_inline)) inline uint64_t getBits(uint64_t i, uint8_t lowerBound,uint8_t upperBound)
{
 return (i>>lowerBound)&lowerMaskBits(upperBound - lowerBound + 1);
}
template <class Type,class ValueType>
__attribute__((always_inline)) inline void setBit(Type & i,uint8_t index,ValueType v)
{
 setBits(i,index,index,v);
}
__attribute__((always_inline)) inline uint64_t getBit(uint64_t i,uint8_t index)
{
 return getBits(i,index,index);
}
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/IntegerFormatter.h" 2


template <int Base>
IntegerFormatter<Base>::IntegerFormatter(size_t num)
 :num(num){}

template <int Base>
IntegerFormatter<Base>::IntegerFormatter(const void *p)
 :num(reinterpret_cast<size_t>(p)){}

template <int Base>
char *IntegerFormatter<Base>::format()const
{
 itos(num, Base, koutBuf, koutBufSize);
 return koutBuf;
}

template <int Base>
Output & operator<<(Output &out,const IntegerFormatter<Base> &hf)
{
 out << hf.format();
 return out;
}
# 36 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/IntegerFormatter.h" 2
# 15 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 2
# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/gicv3_defines.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/gicv3_defines.h"
#define INCLUDE_ARCH_COMMON_AARCH64_GICV3_BASE_H_ 


#define GIC_DIST_BASE 0x08000000
#define GIC_CPU_BASE 0x08010000
#define GIC_V2M_BASE 0x08020000
#define GIC_ITS_BASE 0x08080000
#define GIC_REDIST_BASE 0x080A0000


#define GIC_REDIST_RD_BASE (GIC_REDIST_BASE)

#define GIC_REDIST_SGI_BASE (GIC_REDIST_RD_BASE + 1024*64)

#define GICD_CTLR_MEM_MAPPED_ADDR (GIC_DIST_BASE+0)
#define GICD_IIDR_MEM_MAPPED_ADDR (GIC_DIST_BASE+0x8)
#define GICD_ISENABLER_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x100 + 4*(n))
#define GICD_ISPENDR_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x200 + 4*(n))
#define GICD_ISACTIVER_MEM_MAPPED_ADDR(n) (GIC_DIST_BASE + 0x300 + 4*(n))
#define GICD_ISENABLER0_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(0)
#define GICD_ISENABLER1_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(1)
#define GICD_ISENABLER2_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(2)
#define GICD_ISENABLER3_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(3)
#define GICD_ISENABLER4_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(4)
#define GICD_ISENABLER5_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(5)
#define GICD_ISENABLER6_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(6)
#define GICD_ISENABLER7_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(7)
#define GICD_ISENABLER8_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(8)
#define GICD_ISENABLER9_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(9)
#define GICD_ISENABLER10_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(10)
#define GICD_ISENABLER11_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(11)
#define GICD_ISENABLER12_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(12)
#define GICD_ISENABLER13_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(13)
#define GICD_ISENABLER14_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(14)
#define GICD_ISENABLER15_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(15)
#define GICD_ISENABLER16_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(16)
#define GICD_ISENABLER17_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(17)
#define GICD_ISENABLER18_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(18)
#define GICD_ISENABLER19_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(19)
#define GICD_ISENABLER20_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(20)
#define GICD_ISENABLER21_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(21)
#define GICD_ISENABLER22_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(22)
#define GICD_ISENABLER23_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(23)
#define GICD_ISENABLER24_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(24)
#define GICD_ISENABLER25_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(25)
#define GICD_ISENABLER26_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(26)
#define GICD_ISENABLER27_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(27)
#define GICD_ISENABLER28_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(28)
#define GICD_ISENABLER29_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(29)
#define GICD_ISENABLER30_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(30)
#define GICD_ISENABLER31_MEM_MAPPED_ADDR GICD_ISENABLER_MEM_MAPPED_ADDR(31)

#define GICD_ISPENDR0_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(0)
#define GICD_ISPENDR1_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(1)
#define GICD_ISPENDR2_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(2)
#define GICD_ISPENDR3_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(3)
#define GICD_ISPENDR4_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(4)
#define GICD_ISPENDR5_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(5)
#define GICD_ISPENDR6_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(6)
#define GICD_ISPENDR7_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(7)
#define GICD_ISPENDR8_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(8)
#define GICD_ISPENDR9_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(9)
#define GICD_ISPENDR10_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(10)
#define GICD_ISPENDR11_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(11)
#define GICD_ISPENDR12_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(12)
#define GICD_ISPENDR13_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(13)
#define GICD_ISPENDR14_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(14)
#define GICD_ISPENDR15_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(15)
#define GICD_ISPENDR16_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(16)
#define GICD_ISPENDR17_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(17)
#define GICD_ISPENDR18_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(18)
#define GICD_ISPENDR19_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(19)
#define GICD_ISPENDR20_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(20)
#define GICD_ISPENDR21_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(21)
#define GICD_ISPENDR22_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(22)
#define GICD_ISPENDR23_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(23)
#define GICD_ISPENDR24_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(24)
#define GICD_ISPENDR25_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(25)
#define GICD_ISPENDR26_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(26)
#define GICD_ISPENDR27_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(27)
#define GICD_ISPENDR28_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(28)
#define GICD_ISPENDR29_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(29)
#define GICD_ISPENDR30_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(30)
#define GICD_ISPENDR31_MEM_MAPPED_ADDR GICD_ISPENDR_MEM_MAPPED_ADDR(31)


#define GICD_ISACTIVER0_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(0)
#define GICD_ISACTIVER1_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(1)
#define GICD_ISACTIVER2_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(2)
#define GICD_ISACTIVER3_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(3)
#define GICD_ISACTIVER4_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(4)
#define GICD_ISACTIVER5_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(5)
#define GICD_ISACTIVER6_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(6)
#define GICD_ISACTIVER7_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(7)
#define GICD_ISACTIVER8_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(8)
#define GICD_ISACTIVER9_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(9)
#define GICD_ISACTIVER10_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(10)
#define GICD_ISACTIVER11_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(11)
#define GICD_ISACTIVER12_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(12)
#define GICD_ISACTIVER13_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(13)
#define GICD_ISACTIVER14_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(14)
#define GICD_ISACTIVER15_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(15)
#define GICD_ISACTIVER16_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(16)
#define GICD_ISACTIVER17_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(17)
#define GICD_ISACTIVER18_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(18)
#define GICD_ISACTIVER19_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(19)
#define GICD_ISACTIVER20_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(20)
#define GICD_ISACTIVER21_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(21)
#define GICD_ISACTIVER22_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(22)
#define GICD_ISACTIVER23_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(23)
#define GICD_ISACTIVER24_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(24)
#define GICD_ISACTIVER25_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(25)
#define GICD_ISACTIVER26_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(26)
#define GICD_ISACTIVER27_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(27)
#define GICD_ISACTIVER28_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(28)
#define GICD_ISACTIVER29_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(29)
#define GICD_ISACTIVER30_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(30)
#define GICD_ISACTIVER31_MEM_MAPPED_ADDR GICD_ISACTIVER_MEM_MAPPED_ADDR(31)

#define GICR_IPRIORITYR_MEM_MAPPED_ADDR(n) (GIC_REDIST_SGI_BASE + 0x400 + 4*(n))
#define GICR_IPRIORITYR0_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(0)
#define GICR_IPRIORITYR1_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(1)
#define GICR_IPRIORITYR2_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(2)
#define GICR_IPRIORITYR3_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(3)
#define GICR_IPRIORITYR4_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(4)
#define GICR_IPRIORITYR5_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(5)
#define GICR_IPRIORITYR6_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(6)
#define GICR_IPRIORITYR7_MEM_MAPPED_ADDR GICR_IPRIORITYR_MEM_MAPPED_ADDR(7)

#define GICR_CTLR_MEM_MAPPED_ADDR (GIC_REDIST_BASE+0)
#define GICR_WAKER_MEM_MAPPED_ADDR (GIC_REDIST_BASE+0x14)
#define GICR_IGROUPR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x80)
#define GICR_ISACTIVER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x300)
#define GICR_ISPENDR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0x200)
#define GICR_ISENABLER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x100)

#define GICR_ICENABLER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0x180)
#define GICR_ICFGR0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0xc00)
#define GICR_ICFGR1_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE+0xc04)
#define GICR_ICACTIVER0_MEM_MAPPED_ADDR (GIC_REDIST_SGI_BASE + 0x380)
# 16 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h" 2


#define DEFINE_REG_READ(regTypeInCXX,regNameInAsm) regTypeInCXX regTypeInCXX::read(){ regTypeInCXX res;__asm__ __volatile__("mrs %0," __stringify(regNameInAsm) "\n\t":"=r"(res));return res;}
#define DEFINE_REG_UPDATE_READ(regTypeInCXX,regNameInAsm) regTypeInCXX regTypeInCXX::updateRead(){ __asm__ __volatile__("mrs %0," __stringify(regNameInAsm) "\n\t":"=r"(*this));return *this;}
#define DEFINE_REG_WRITE(regTypeInCXX,regNameInAsm) void regTypeInCXX::write() const { __asm__ __volatile__("msr " __stringify(regNameInAsm) ",%0 \n\t"::"r"(*this));}


#define SETUP_REG_STD_READ(regname) DEFINE_REG_READ(Reg ##regname,regname)
#define SETUP_REG_STD_UPDATE_READ(regname) DEFINE_REG_UPDATE_READ(Reg ##regname,regname)
#define SETUP_REG_STD_WRITE(regname) DEFINE_REG_WRITE(Reg ##regname,regname)



#define SYS_REG_GCC_REPR(op0,op1,crn,crm,op2) s ##op0 ##_ ##op1 ##_ ##c ##crn ##_ ##c ##crm ##_ ##op2


#define PAN_GCC_REPR SYS_REG_GCC_REPR(3,0,4,2,3)
#define ICC_BPR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,3)
#define ICC_BPR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,3)
#define ICC_CTLR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,4)
#define ICC_CTLR_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,4)
#define ICC_DIR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,1)
#define ICC_EOIR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,1)
#define ICC_EOIR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,1)
#define ICC_HPPIR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,2)
#define ICC_HPPIR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,2)
#define ICC_IAR0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,8,0)
#define ICC_IAR1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,0)
#define ICC_IGRPEN0_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,6)
#define ICC_IGRPEN1_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,7)
#define ICC_IGRPEN1_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,7)
#define ICC_PMR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,4,6,0)
#define ICC_RPR_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,3)
#define ICC_SGI0R_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,7)
#define ICC_SGI1R_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,11,5)
#define ICC_SRE_EL1_GCC_REPR SYS_REG_GCC_REPR(3,0,12,12,5)
#define ICC_SRE_EL2_GCC_REPR SYS_REG_GCC_REPR(3,4,12,9,5)
#define ICC_SRE_EL3_GCC_REPR SYS_REG_GCC_REPR(3,6,12,12,5)

#define SETUP_REG_GCC_REPR_READ(name) DEFINE_REG_READ(Reg ##name,name ##_GCC_REPR)
#define SETUP_REG_GCC_REPR_UPDATE_READ(name) DEFINE_REG_UPDATE_READ(Reg ##name,name ##_GCC_REPR)
#define SETUP_REG_GCC_REPR_WRITE(name) DEFINE_REG_WRITE(Reg ##name,name ##_GCC_REPR)




#define ENCODE_MSR 11010101000


#define ENCODE_MRS 11010101001
#define ENCODE_ICC_IGRPEN0_EL1 1100011001100110
#define ENCODE_X0 00000


#define SETUP_REG_HARD_CODED_READ(name) Reg ##name Reg ##name::read() { Reg ##name res; __asm__ __volatile__( ".4byte 0b" __stringify(ENCODE_MRS) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" "mov %0,x0 \n\t" :"=r"(res)); return res; }
# 81 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_HARD_CODED_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { __asm__ __volatile__( ".4byte 0b" __stringify(ENCODE_MRS) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" "mov %0,x0 \n\t" :"=r"(*this)); return *this;}
# 91 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_HARD_CODED_WRITE(name) void Reg ##name::write() const{ __asm__ __volatile( "mov x0,%0 \n\t" ".4byte 0b" __stringify(ENCODE_MSR) __stringify(ENCODE_ ##name) __stringify(ENCODE_X0) "\n\t" : :"r"(*this) ); }
# 108 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_MEM_MAPPED_READ(name) Reg ##name Reg ##name::read() { return *reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR);}





#define SETUP_REG_MEM_MAPPED_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { return *this=*reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR);}





#define SETUP_REG_MEM_MAPPED_WRITE(name) void Reg ##name::write() const{ *reinterpret_cast<Reg ##name*>(name ##_MEM_MAPPED_ADDR)=*this;}







#define SETUP_REG_PC_READ(name) Reg ##name Reg ##name::read() { Reg ##name res; __asm__ __volatile__("adr %0,#0\n\t":"=r"(res)); return res; }






#define SETUP_REG_PC_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { __asm__ __volatile__("adr %0,#0\n\t":"=r"(*this)); return *this; }





#define SETUP_REG_PC_WRITE(name) void Reg ##name::write()const { __asm__ __volatile__("br %0\n\t"::"r"(*this)); }







#define SETUP_REG_ANY_MEM_READ(name) Reg ##name Reg ##name::read(void *p) { return *reinterpret_cast<Reg ##name*>(p);}Reg ##name Reg ##name::read(size_t p){ return *reinterpret_cast<Reg ##name*>(p);}
# 159 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_ANY_MEM_WRITE(name) void Reg ##name::write(void *p)const { *reinterpret_cast<Reg ##name*>(p)=*this; }void Reg ##name::write(size_t p)const{ *reinterpret_cast<Reg ##name*>(p)=*this;}
# 170 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/registers_defines.h"
#define SETUP_REG_LOAD_STORE_READ(name) Reg ##name Reg ##name::read() { Reg ##name res{0}; __asm__ __volatile__("str " __stringify(name)",%0 \n\t"::"m"(res)); return res; }






#define SETUP_REG_LOAD_STORE_UPDATE_READ(name) Reg ##name Reg ##name::updateRead() { __asm__ __volatile__("str " __stringify(name)",%0 \n\t"::"m"(*this)); return *this; }





#define SETUP_REG_LOAD_STORE_WRITE(name) void Reg ##name::write()const { __asm__ __volatile__("ldr " __stringify(name) ",%0 \n\t"::"m"(*this)); }
# 7 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/system_common_registers.h" 2

class RegCurrentEL{
public:
        uint32_t RES0_0:2;
        uint32_t EL:2;
        uint32_t RES0_1:28;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "CurrentEL : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegCurrentEL read();
        __attribute__((always_inline)) inline RegCurrentEL updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegCurrentEL RegCurrentEL::read(){ RegCurrentEL res;__asm__ __volatile__("mrs %0," "CurrentEL" "\n\t":"=r"(res));return res;}
RegCurrentEL RegCurrentEL::updateRead(){ __asm__ __volatile__("mrs %0," "CurrentEL" "\n\t":"=r"(*this));return *this;}
void RegCurrentEL::write() const { __asm__ __volatile__("msr " "CurrentEL" ",%0 \n\t"::"r"(*this));}



class RegDAIF{
public:
        uint32_t RES0_0:6;
        uint32_t F:1;
        uint32_t I:1;
        uint32_t A:1;
        uint32_t D:1;
        uint32_t RES0_1:22;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "DAIF : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"F = "<< F << ","
                <<"I = "<< I << ","
                <<"A = "<< A << ","
                <<"D = "<< D << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegDAIF read();
        __attribute__((always_inline)) inline RegDAIF updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegDAIF RegDAIF::read(){ RegDAIF res;__asm__ __volatile__("mrs %0," "DAIF" "\n\t":"=r"(res));return res;}
RegDAIF RegDAIF::updateRead(){ __asm__ __volatile__("mrs %0," "DAIF" "\n\t":"=r"(*this));return *this;}
void RegDAIF::write() const { __asm__ __volatile__("msr " "DAIF" ",%0 \n\t"::"r"(*this));}



class RegVBAR_EL1{
public:
        uint64_t Addr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "VBAR_EL1 : "
                <<"Addr = "<< Hex(Addr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegVBAR_EL1 read();
        __attribute__((always_inline)) inline RegVBAR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegVBAR_EL1 RegVBAR_EL1::read(){ RegVBAR_EL1 res;__asm__ __volatile__("mrs %0," "VBAR_EL1" "\n\t":"=r"(res));return res;}
RegVBAR_EL1 RegVBAR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "VBAR_EL1" "\n\t":"=r"(*this));return *this;}
void RegVBAR_EL1::write() const { __asm__ __volatile__("msr " "VBAR_EL1" ",%0 \n\t"::"r"(*this));}



class RegELR_EL1{
public:
        uint64_t returnAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ELR_EL1 : "
                <<"returnAddr = "<< Hex(returnAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegELR_EL1 read();
        __attribute__((always_inline)) inline RegELR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegELR_EL1 RegELR_EL1::read(){ RegELR_EL1 res;__asm__ __volatile__("mrs %0," "ELR_EL1" "\n\t":"=r"(res));return res;}
RegELR_EL1 RegELR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ELR_EL1" "\n\t":"=r"(*this));return *this;}
void RegELR_EL1::write() const { __asm__ __volatile__("msr " "ELR_EL1" ",%0 \n\t"::"r"(*this));}



class RegELR_EL2{
public:
        uint64_t returnAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ELR_EL2 : "
                <<"returnAddr = "<< Hex(returnAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegELR_EL2 read();
        __attribute__((always_inline)) inline RegELR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegELR_EL2 RegELR_EL2::read(){ RegELR_EL2 res;__asm__ __volatile__("mrs %0," "ELR_EL2" "\n\t":"=r"(res));return res;}
RegELR_EL2 RegELR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "ELR_EL2" "\n\t":"=r"(*this));return *this;}
void RegELR_EL2::write() const { __asm__ __volatile__("msr " "ELR_EL2" ",%0 \n\t"::"r"(*this));}



class RegELR_EL3{
public:
        uint64_t returnAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ELR_EL3 : "
                <<"returnAddr = "<< Hex(returnAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegELR_EL3 read();
        __attribute__((always_inline)) inline RegELR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegELR_EL3 RegELR_EL3::read(){ RegELR_EL3 res;__asm__ __volatile__("mrs %0," "ELR_EL3" "\n\t":"=r"(res));return res;}
RegELR_EL3 RegELR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "ELR_EL3" "\n\t":"=r"(*this));return *this;}
void RegELR_EL3::write() const { __asm__ __volatile__("msr " "ELR_EL3" ",%0 \n\t"::"r"(*this));}



class RegESR_EL1{
public:
        uint32_t ISS:25;
        uint32_t IL:1;
        uint32_t EC:6;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ESR_EL1 : "
                <<"ISS = "<< Hex(ISS) << ","
                <<"IL = "<< IL << ","
                <<"EC = "<< Hex(EC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegESR_EL1 read();
        __attribute__((always_inline)) inline RegESR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegESR_EL1 RegESR_EL1::read(){ RegESR_EL1 res;__asm__ __volatile__("mrs %0," "ESR_EL1" "\n\t":"=r"(res));return res;}
RegESR_EL1 RegESR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ESR_EL1" "\n\t":"=r"(*this));return *this;}
void RegESR_EL1::write() const { __asm__ __volatile__("msr " "ESR_EL1" ",%0 \n\t"::"r"(*this));}



class RegESR_EL2{
public:
        uint32_t ISS:25;
        uint32_t IL:1;
        uint32_t EC:6;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ESR_EL2 : "
                <<"ISS = "<< Hex(ISS) << ","
                <<"IL = "<< IL << ","
                <<"EC = "<< Hex(EC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegESR_EL2 read();
        __attribute__((always_inline)) inline RegESR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegESR_EL2 RegESR_EL2::read(){ RegESR_EL2 res;__asm__ __volatile__("mrs %0," "ESR_EL2" "\n\t":"=r"(res));return res;}
RegESR_EL2 RegESR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "ESR_EL2" "\n\t":"=r"(*this));return *this;}
void RegESR_EL2::write() const { __asm__ __volatile__("msr " "ESR_EL2" ",%0 \n\t"::"r"(*this));}



class RegESR_EL3{
public:
        uint32_t ISS:25;
        uint32_t IL:1;
        uint32_t EC:6;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ESR_EL3 : "
                <<"ISS = "<< Hex(ISS) << ","
                <<"IL = "<< IL << ","
                <<"EC = "<< Hex(EC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegESR_EL3 read();
        __attribute__((always_inline)) inline RegESR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegESR_EL3 RegESR_EL3::read(){ RegESR_EL3 res;__asm__ __volatile__("mrs %0," "ESR_EL3" "\n\t":"=r"(res));return res;}
RegESR_EL3 RegESR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "ESR_EL3" "\n\t":"=r"(*this));return *this;}
void RegESR_EL3::write() const { __asm__ __volatile__("msr " "ESR_EL3" ",%0 \n\t"::"r"(*this));}



class RegFAR_EL1{
public:
        uint64_t faultAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "FAR_EL1 : "
                <<"faultAddr = "<< Hex(faultAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegFAR_EL1 read();
        __attribute__((always_inline)) inline RegFAR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegFAR_EL1 RegFAR_EL1::read(){ RegFAR_EL1 res;__asm__ __volatile__("mrs %0," "FAR_EL1" "\n\t":"=r"(res));return res;}
RegFAR_EL1 RegFAR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "FAR_EL1" "\n\t":"=r"(*this));return *this;}
void RegFAR_EL1::write() const { __asm__ __volatile__("msr " "FAR_EL1" ",%0 \n\t"::"r"(*this));}



class RegFAR_EL2{
public:
        uint64_t faultAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "FAR_EL2 : "
                <<"faultAddr = "<< Hex(faultAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegFAR_EL2 read();
        __attribute__((always_inline)) inline RegFAR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegFAR_EL2 RegFAR_EL2::read(){ RegFAR_EL2 res;__asm__ __volatile__("mrs %0," "FAR_EL2" "\n\t":"=r"(res));return res;}
RegFAR_EL2 RegFAR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "FAR_EL2" "\n\t":"=r"(*this));return *this;}
void RegFAR_EL2::write() const { __asm__ __volatile__("msr " "FAR_EL2" ",%0 \n\t"::"r"(*this));}



class RegFAR_EL3{
public:
        uint64_t faultAddr:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "FAR_EL3 : "
                <<"faultAddr = "<< Hex(faultAddr)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegFAR_EL3 read();
        __attribute__((always_inline)) inline RegFAR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegFAR_EL3 RegFAR_EL3::read(){ RegFAR_EL3 res;__asm__ __volatile__("mrs %0," "FAR_EL3" "\n\t":"=r"(res));return res;}
RegFAR_EL3 RegFAR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "FAR_EL3" "\n\t":"=r"(*this));return *this;}
void RegFAR_EL3::write() const { __asm__ __volatile__("msr " "FAR_EL3" ",%0 \n\t"::"r"(*this));}



class RegSPSR_EL1{
public:
        uint32_t SPSel:1;
        uint32_t RES0_0:1;
        uint32_t EL:2;
        uint32_t ExeState:1;
        uint32_t RES0_1:1;
        uint32_t FIQMask:1;
        uint32_t IRQMask:1;
        uint32_t SErrorMask:1;
        uint32_t DebugMask:1;
        uint32_t RES0_2:10;
        uint32_t IL:1;
        uint32_t SoftwareStep:1;
        uint32_t PAN:1;
        uint32_t UAO:1;
        uint32_t RES0_3:4;
        uint32_t V:1;
        uint32_t C:1;
        uint32_t Z:1;
        uint32_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSR_EL1 : "
                <<"SPSel = "<< SPSel << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"ExeState = "<< ExeState << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"FIQMask = "<< FIQMask << ","
                <<"IRQMask = "<< IRQMask << ","
                <<"SErrorMask = "<< SErrorMask << ","
                <<"DebugMask = "<< DebugMask << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"IL = "<< IL << ","
                <<"SoftwareStep = "<< SoftwareStep << ","
                <<"PAN = "<< PAN << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSR_EL1 read();
        __attribute__((always_inline)) inline RegSPSR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSR_EL1 RegSPSR_EL1::read(){ RegSPSR_EL1 res;__asm__ __volatile__("mrs %0," "SPSR_EL1" "\n\t":"=r"(res));return res;}
RegSPSR_EL1 RegSPSR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "SPSR_EL1" "\n\t":"=r"(*this));return *this;}
void RegSPSR_EL1::write() const { __asm__ __volatile__("msr " "SPSR_EL1" ",%0 \n\t"::"r"(*this));}



class RegSPSR_EL2{
public:
        uint32_t SPSel:1;
        uint32_t RES0_0:1;
        uint32_t EL:2;
        uint32_t ExeState:1;
        uint32_t RES0_1:1;
        uint32_t FIQMask:1;
        uint32_t IRQMask:1;
        uint32_t SErrorMask:1;
        uint32_t DebugMask:1;
        uint32_t RES0_2:10;
        uint32_t IL:1;
        uint32_t SoftwareStep:1;
        uint32_t PAN:1;
        uint32_t UAO:1;
        uint32_t RES0_3:4;
        uint32_t V:1;
        uint32_t C:1;
        uint32_t Z:1;
        uint32_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSR_EL2 : "
                <<"SPSel = "<< SPSel << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"ExeState = "<< ExeState << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"FIQMask = "<< FIQMask << ","
                <<"IRQMask = "<< IRQMask << ","
                <<"SErrorMask = "<< SErrorMask << ","
                <<"DebugMask = "<< DebugMask << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"IL = "<< IL << ","
                <<"SoftwareStep = "<< SoftwareStep << ","
                <<"PAN = "<< PAN << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSR_EL2 read();
        __attribute__((always_inline)) inline RegSPSR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSR_EL2 RegSPSR_EL2::read(){ RegSPSR_EL2 res;__asm__ __volatile__("mrs %0," "SPSR_EL2" "\n\t":"=r"(res));return res;}
RegSPSR_EL2 RegSPSR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "SPSR_EL2" "\n\t":"=r"(*this));return *this;}
void RegSPSR_EL2::write() const { __asm__ __volatile__("msr " "SPSR_EL2" ",%0 \n\t"::"r"(*this));}



class RegSPSR_EL3{
public:
        uint32_t SPSel:1;
        uint32_t RES0_0:1;
        uint32_t EL:2;
        uint32_t ExeState:1;
        uint32_t RES0_1:1;
        uint32_t FIQMask:1;
        uint32_t IRQMask:1;
        uint32_t SErrorMask:1;
        uint32_t DebugMask:1;
        uint32_t RES0_2:10;
        uint32_t IL:1;
        uint32_t SoftwareStep:1;
        uint32_t PAN:1;
        uint32_t UAO:1;
        uint32_t RES0_3:4;
        uint32_t V:1;
        uint32_t C:1;
        uint32_t Z:1;
        uint32_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSR_EL3 : "
                <<"SPSel = "<< SPSel << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EL = "<< EL << ","
                <<"ExeState = "<< ExeState << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"FIQMask = "<< FIQMask << ","
                <<"IRQMask = "<< IRQMask << ","
                <<"SErrorMask = "<< SErrorMask << ","
                <<"DebugMask = "<< DebugMask << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"IL = "<< IL << ","
                <<"SoftwareStep = "<< SoftwareStep << ","
                <<"PAN = "<< PAN << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSR_EL3 read();
        __attribute__((always_inline)) inline RegSPSR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSR_EL3 RegSPSR_EL3::read(){ RegSPSR_EL3 res;__asm__ __volatile__("mrs %0," "SPSR_EL3" "\n\t":"=r"(res));return res;}
RegSPSR_EL3 RegSPSR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "SPSR_EL3" "\n\t":"=r"(*this));return *this;}
void RegSPSR_EL3::write() const { __asm__ __volatile__("msr " "SPSR_EL3" ",%0 \n\t"::"r"(*this));}



class RegSP{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP read();
        __attribute__((always_inline)) inline RegSP updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP RegSP::read(){ RegSP res;__asm__ __volatile__("mrs %0," "SP" "\n\t":"=r"(res));return res;}
RegSP RegSP::updateRead(){ __asm__ __volatile__("mrs %0," "SP" "\n\t":"=r"(*this));return *this;}
void RegSP::write() const { __asm__ __volatile__("msr " "SP" ",%0 \n\t"::"r"(*this));}



class RegSP_EL0{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL0 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL0 read();
        __attribute__((always_inline)) inline RegSP_EL0 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL0 RegSP_EL0::read(){ RegSP_EL0 res;__asm__ __volatile__("mrs %0," "SP_EL0" "\n\t":"=r"(res));return res;}
RegSP_EL0 RegSP_EL0::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL0" "\n\t":"=r"(*this));return *this;}
void RegSP_EL0::write() const { __asm__ __volatile__("msr " "SP_EL0" ",%0 \n\t"::"r"(*this));}



class RegSP_EL1{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL1 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL1 read();
        __attribute__((always_inline)) inline RegSP_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL1 RegSP_EL1::read(){ RegSP_EL1 res;__asm__ __volatile__("mrs %0," "SP_EL1" "\n\t":"=r"(res));return res;}
RegSP_EL1 RegSP_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL1" "\n\t":"=r"(*this));return *this;}
void RegSP_EL1::write() const { __asm__ __volatile__("msr " "SP_EL1" ",%0 \n\t"::"r"(*this));}



class RegSP_EL2{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL2 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL2 read();
        __attribute__((always_inline)) inline RegSP_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL2 RegSP_EL2::read(){ RegSP_EL2 res;__asm__ __volatile__("mrs %0," "SP_EL2" "\n\t":"=r"(res));return res;}
RegSP_EL2 RegSP_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL2" "\n\t":"=r"(*this));return *this;}
void RegSP_EL2::write() const { __asm__ __volatile__("msr " "SP_EL2" ",%0 \n\t"::"r"(*this));}



class RegSP_EL3{
public:
        uint64_t SP:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SP_EL3 : "
                <<"SP = "<< SP
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSP_EL3 read();
        __attribute__((always_inline)) inline RegSP_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSP_EL3 RegSP_EL3::read(){ RegSP_EL3 res;__asm__ __volatile__("mrs %0," "SP_EL3" "\n\t":"=r"(res));return res;}
RegSP_EL3 RegSP_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "SP_EL3" "\n\t":"=r"(*this));return *this;}
void RegSP_EL3::write() const { __asm__ __volatile__("msr " "SP_EL3" ",%0 \n\t"::"r"(*this));}



class RegNZCV{
public:
        uint64_t RES0:28;
        uint64_t V:1;
        uint64_t C:1;
        uint64_t Z:1;
        uint64_t N:1;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "NZCV : "
                <<"RES0 = "<< RES0 << ","
                <<"V = "<< V << ","
                <<"C = "<< C << ","
                <<"Z = "<< Z << ","
                <<"N = "<< N
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegNZCV read();
        __attribute__((always_inline)) inline RegNZCV updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegNZCV RegNZCV::read(){ RegNZCV res;__asm__ __volatile__("mrs %0," "NZCV" "\n\t":"=r"(res));return res;}
RegNZCV RegNZCV::updateRead(){ __asm__ __volatile__("mrs %0," "NZCV" "\n\t":"=r"(*this));return *this;}
void RegNZCV::write() const { __asm__ __volatile__("msr " "NZCV" ",%0 \n\t"::"r"(*this));}



class RegPAN{
public:
        uint32_t RES0_0:22;
        uint32_t PAN:1;
        uint32_t RES0_1:9;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "PAN : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"PAN = "<< PAN << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegPAN read();
        __attribute__((always_inline)) inline RegPAN updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegPAN RegPAN::read(){ RegPAN res;__asm__ __volatile__("mrs %0," "PAN" "\n\t":"=r"(res));return res;}
RegPAN RegPAN::updateRead(){ __asm__ __volatile__("mrs %0," "PAN" "\n\t":"=r"(*this));return *this;}
void RegPAN::write() const { __asm__ __volatile__("msr " "PAN" ",%0 \n\t"::"r"(*this));}



class RegSPSel{
public:
        uint32_t SP:1;
        uint32_t RES0:31;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SPSel : "
                <<"SP = "<< SP << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSPSel read();
        __attribute__((always_inline)) inline RegSPSel updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSPSel RegSPSel::read(){ RegSPSel res;__asm__ __volatile__("mrs %0," "SPSel" "\n\t":"=r"(res));return res;}
RegSPSel RegSPSel::updateRead(){ __asm__ __volatile__("mrs %0," "SPSel" "\n\t":"=r"(*this));return *this;}
void RegSPSel::write() const { __asm__ __volatile__("msr " "SPSel" ",%0 \n\t"::"r"(*this));}



class RegUAO{
public:
        uint64_t RES0_0:23;
        uint64_t UAO:1;
        uint64_t RES0_1:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "UAO : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"UAO = "<< UAO << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegUAO read();
        __attribute__((always_inline)) inline RegUAO updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegUAO RegUAO::read(){ RegUAO res;__asm__ __volatile__("mrs %0," "UAO" "\n\t":"=r"(res));return res;}
RegUAO RegUAO::updateRead(){ __asm__ __volatile__("mrs %0," "UAO" "\n\t":"=r"(*this));return *this;}
void RegUAO::write() const { __asm__ __volatile__("msr " "UAO" ",%0 \n\t"::"r"(*this));}



class RegPC{
public:
        uint64_t PC:64;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "PC : "
                <<"PC = "<< Hex(PC)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegPC read();
        __attribute__((always_inline)) inline RegPC updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegPC RegPC::read() { RegPC res; __asm__ __volatile__("adr %0,#0\n\t":"=r"(res)); return res; }
RegPC RegPC::updateRead() { __asm__ __volatile__("adr %0,#0\n\t":"=r"(*this)); return *this; }
void RegPC::write()const { __asm__ __volatile__("br %0\n\t"::"r"(*this)); }



class RegTCR_EL1{
public:
        uint64_t T0SZ:6;
        uint64_t RES0_0:1;
        uint64_t EPD0:1;
        uint64_t IRGN0:2;
        uint64_t ORGN0:2;
        uint64_t SH0:2;
        uint64_t TG0:2;
        uint64_t T1SZ:6;
        uint64_t A1:1;
        uint64_t EPD1:1;
        uint64_t IRGN1:2;
        uint64_t ORGN1:2;
        uint64_t SH1:2;
        uint64_t TG1:2;
        uint64_t IPS:3;
        uint64_t RES0_1:1;
        uint64_t AS:1;
        uint64_t TBI0:1;
        uint64_t TBI1:1;
        uint64_t HA:1;
        uint64_t HD:1;
        uint64_t HPD0:1;
        uint64_t HPD1:1;
        uint64_t HWU059:1;
        uint64_t HWU060:1;
        uint64_t HWU061:1;
        uint64_t HWU062:1;
        uint64_t HWU159:1;
        uint64_t HWU160:1;
        uint64_t HWU161:1;
        uint64_t HWU162:1;
        uint64_t RES0_2:2;
        uint64_t NFD0:1;
        uint64_t NFD1:1;
        uint64_t RES0_3:9;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "TCR_EL1 : "
                <<"T0SZ = "<< T0SZ << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"EPD0 = "<< EPD0 << ","
                <<"IRGN0 = "<< IRGN0 << ","
                <<"ORGN0 = "<< ORGN0 << ","
                <<"SH0 = "<< SH0 << ","
                <<"TG0 = "<< TG0 << ","
                <<"T1SZ = "<< T1SZ << ","
                <<"A1 = "<< A1 << ","
                <<"EPD1 = "<< EPD1 << ","
                <<"IRGN1 = "<< IRGN1 << ","
                <<"ORGN1 = "<< ORGN1 << ","
                <<"SH1 = "<< SH1 << ","
                <<"TG1 = "<< TG1 << ","
                <<"IPS = "<< IPS << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"AS = "<< AS << ","
                <<"TBI0 = "<< TBI0 << ","
                <<"TBI1 = "<< TBI1 << ","
                <<"HA = "<< HA << ","
                <<"HD = "<< HD << ","
                <<"HPD0 = "<< HPD0 << ","
                <<"HPD1 = "<< HPD1 << ","
                <<"HWU059 = "<< HWU059 << ","
                <<"HWU060 = "<< HWU060 << ","
                <<"HWU061 = "<< HWU061 << ","
                <<"HWU062 = "<< HWU062 << ","
                <<"HWU159 = "<< HWU159 << ","
                <<"HWU160 = "<< HWU160 << ","
                <<"HWU161 = "<< HWU161 << ","
                <<"HWU162 = "<< HWU162 << ","
                <<"RES0_2 = "<< RES0_2 << ","
                <<"NFD0 = "<< NFD0 << ","
                <<"NFD1 = "<< NFD1 << ","
                <<"RES0_3 = "<< RES0_3
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegTCR_EL1 read();
        __attribute__((always_inline)) inline RegTCR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegTCR_EL1 RegTCR_EL1::read(){ RegTCR_EL1 res;__asm__ __volatile__("mrs %0," "TCR_EL1" "\n\t":"=r"(res));return res;}
RegTCR_EL1 RegTCR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "TCR_EL1" "\n\t":"=r"(*this));return *this;}
void RegTCR_EL1::write() const { __asm__ __volatile__("msr " "TCR_EL1" ",%0 \n\t"::"r"(*this));}



class RegISR_EL1{
public:
        uint32_t RES0_0:6;
        uint32_t F:1;
        uint32_t I:1;
        uint32_t A:1;
        uint32_t RES0_1:23;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ISR_EL1 : "
                <<"RES0_0 = "<< RES0_0 << ","
                <<"F = "<< F << ","
                <<"I = "<< I << ","
                <<"A = "<< A << ","
                <<"RES0_1 = "<< RES0_1
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegISR_EL1 read();
        __attribute__((always_inline)) inline RegISR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegISR_EL1 RegISR_EL1::read(){ RegISR_EL1 res;__asm__ __volatile__("mrs %0," "ISR_EL1" "\n\t":"=r"(res));return res;}
RegISR_EL1 RegISR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ISR_EL1" "\n\t":"=r"(*this));return *this;}
void RegISR_EL1::write() const { __asm__ __volatile__("msr " "ISR_EL1" ",%0 \n\t"::"r"(*this));}



class RegID_AA64PFR0_EL1{
public:
        uint64_t EL0:4;
        uint64_t EL1:4;
        uint64_t EL2:4;
        uint64_t EL3:4;
        uint64_t FP:4;
        uint64_t AdvSIMD:4;
        uint64_t GIC:4;
        uint64_t RAS:4;
        uint64_t SVE:4;
        uint64_t RES0:28;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ID_AA64PFR0_EL1 : "
                <<"EL0 = "<< EL0 << ","
                <<"EL1 = "<< EL1 << ","
                <<"EL2 = "<< EL2 << ","
                <<"EL3 = "<< EL3 << ","
                <<"FP = "<< FP << ","
                <<"AdvSIMD = "<< AdvSIMD << ","
                <<"GIC = "<< GIC << ","
                <<"RAS = "<< RAS << ","
                <<"SVE = "<< SVE << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegID_AA64PFR0_EL1 read();
        __attribute__((always_inline)) inline RegID_AA64PFR0_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegID_AA64PFR0_EL1 RegID_AA64PFR0_EL1::read(){ RegID_AA64PFR0_EL1 res;__asm__ __volatile__("mrs %0," "ID_AA64PFR0_EL1" "\n\t":"=r"(res));return res;}
RegID_AA64PFR0_EL1 RegID_AA64PFR0_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ID_AA64PFR0_EL1" "\n\t":"=r"(*this));return *this;}
void RegID_AA64PFR0_EL1::write() const { __asm__ __volatile__("msr " "ID_AA64PFR0_EL1" ",%0 \n\t"::"r"(*this));}



class RegID_AA64MMFR1_EL1{
public:
        uint64_t HAFDBS:4;
        uint64_t VMIDBits:4;
        uint64_t VH:4;
        uint64_t HPDS:4;
        uint64_t LO:4;
        uint64_t PAN:4;
        uint64_t SpecSEI:4;
        uint64_t XNX:4;
        uint64_t RES0:32;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ID_AA64MMFR1_EL1 : "
                <<"HAFDBS = "<< HAFDBS << ","
                <<"VMIDBits = "<< VMIDBits << ","
                <<"VH = "<< VH << ","
                <<"HPDS = "<< HPDS << ","
                <<"LO = "<< LO << ","
                <<"PAN = "<< PAN << ","
                <<"SpecSEI = "<< SpecSEI << ","
                <<"XNX = "<< XNX << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegID_AA64MMFR1_EL1 read();
        __attribute__((always_inline)) inline RegID_AA64MMFR1_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegID_AA64MMFR1_EL1 RegID_AA64MMFR1_EL1::read(){ RegID_AA64MMFR1_EL1 res;__asm__ __volatile__("mrs %0," "ID_AA64MMFR1_EL1" "\n\t":"=r"(res));return res;}
RegID_AA64MMFR1_EL1 RegID_AA64MMFR1_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ID_AA64MMFR1_EL1" "\n\t":"=r"(*this));return *this;}
void RegID_AA64MMFR1_EL1::write() const { __asm__ __volatile__("msr " "ID_AA64MMFR1_EL1" ",%0 \n\t"::"r"(*this));}



class RegID_AA64MMFR0_EL1{
public:
        uint64_t PARange:4;
        uint64_t ASIDBits:4;
        uint64_t BigEnd:4;
        uint64_t SNSMem:4;
        uint64_t BigEndEL0:4;
        uint64_t TGran16:4;
        uint64_t TGran64:4;
        uint64_t TGran4:4;
        uint64_t RES0:32;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "ID_AA64MMFR0_EL1 : "
                <<"PARange = "<< PARange << ","
                <<"ASIDBits = "<< ASIDBits << ","
                <<"BigEnd = "<< BigEnd << ","
                <<"SNSMem = "<< SNSMem << ","
                <<"BigEndEL0 = "<< BigEndEL0 << ","
                <<"TGran16 = "<< Hex(TGran16) << ","
                <<"TGran64 = "<< Hex(TGran64) << ","
                <<"TGran4 = "<< Hex(TGran4) << ","
                <<"RES0 = "<< RES0
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegID_AA64MMFR0_EL1 read();
        __attribute__((always_inline)) inline RegID_AA64MMFR0_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegID_AA64MMFR0_EL1 RegID_AA64MMFR0_EL1::read(){ RegID_AA64MMFR0_EL1 res;__asm__ __volatile__("mrs %0," "ID_AA64MMFR0_EL1" "\n\t":"=r"(res));return res;}
RegID_AA64MMFR0_EL1 RegID_AA64MMFR0_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "ID_AA64MMFR0_EL1" "\n\t":"=r"(*this));return *this;}
void RegID_AA64MMFR0_EL1::write() const { __asm__ __volatile__("msr " "ID_AA64MMFR0_EL1" ",%0 \n\t"::"r"(*this));}



class RegMIDR_EL1{
public:
        uint32_t Revision:4;
        uint32_t PartNum:12;
        uint32_t Architecture:4;
        uint32_t Variant:4;
        uint32_t Implementer:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MIDR_EL1 : "
                <<"Revision = "<< Revision << ","
                <<"PartNum = "<< PartNum << ","
                <<"Architecture = "<< Architecture << ","
                <<"Variant = "<< Variant << ","
                <<"Implementer = "<< Implementer
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMIDR_EL1 read();
        __attribute__((always_inline)) inline RegMIDR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMIDR_EL1 RegMIDR_EL1::read(){ RegMIDR_EL1 res;__asm__ __volatile__("mrs %0," "MIDR_EL1" "\n\t":"=r"(res));return res;}
RegMIDR_EL1 RegMIDR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "MIDR_EL1" "\n\t":"=r"(*this));return *this;}
void RegMIDR_EL1::write() const { __asm__ __volatile__("msr " "MIDR_EL1" ",%0 \n\t"::"r"(*this));}



class RegMPIDR_EL1{
public:
        uint64_t Aff0:8;
        uint64_t Aff1:8;
        uint64_t Aff2:8;
        uint64_t MT:1;
        uint64_t RES0_0:5;
        uint64_t U:1;
        uint64_t RES1_1:1;
        uint64_t Aff3:8;
        uint64_t RES0_2:24;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MPIDR_EL1 : "
                <<"Aff0 = "<< Aff0 << ","
                <<"Aff1 = "<< Aff1 << ","
                <<"Aff2 = "<< Aff2 << ","
                <<"MT = "<< MT << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"U = "<< U << ","
                <<"RES1_1 = "<< RES1_1 << ","
                <<"Aff3 = "<< Aff3 << ","
                <<"RES0_2 = "<< RES0_2
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMPIDR_EL1 read();
        __attribute__((always_inline)) inline RegMPIDR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMPIDR_EL1 RegMPIDR_EL1::read(){ RegMPIDR_EL1 res;__asm__ __volatile__("mrs %0," "MPIDR_EL1" "\n\t":"=r"(res));return res;}
RegMPIDR_EL1 RegMPIDR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "MPIDR_EL1" "\n\t":"=r"(*this));return *this;}
void RegMPIDR_EL1::write() const { __asm__ __volatile__("msr " "MPIDR_EL1" ",%0 \n\t"::"r"(*this));}



class RegTTBR0_EL1{
public:
        uint64_t CnP:1;
        uint64_t BADDR:47;
        uint64_t ASID:16;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "TTBR0_EL1 : "
                <<"CnP = "<< CnP << ","
                <<"BADDR = "<< Hex(BADDR) << ","
                <<"ASID = "<< ASID
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegTTBR0_EL1 read();
        __attribute__((always_inline)) inline RegTTBR0_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegTTBR0_EL1 RegTTBR0_EL1::read(){ RegTTBR0_EL1 res;__asm__ __volatile__("mrs %0," "TTBR0_EL1" "\n\t":"=r"(res));return res;}
RegTTBR0_EL1 RegTTBR0_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "TTBR0_EL1" "\n\t":"=r"(*this));return *this;}
void RegTTBR0_EL1::write() const { __asm__ __volatile__("msr " "TTBR0_EL1" ",%0 \n\t"::"r"(*this));}



class RegTTBR1_EL1{
public:
        uint64_t CnP:1;
        uint64_t BADDR:47;
        uint64_t ASID:16;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "TTBR1_EL1 : "
                <<"CnP = "<< CnP << ","
                <<"BADDR = "<< Hex(BADDR) << ","
                <<"ASID = "<< ASID
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegTTBR1_EL1 read();
        __attribute__((always_inline)) inline RegTTBR1_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegTTBR1_EL1 RegTTBR1_EL1::read(){ RegTTBR1_EL1 res;__asm__ __volatile__("mrs %0," "TTBR1_EL1" "\n\t":"=r"(res));return res;}
RegTTBR1_EL1 RegTTBR1_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "TTBR1_EL1" "\n\t":"=r"(*this));return *this;}
void RegTTBR1_EL1::write() const { __asm__ __volatile__("msr " "TTBR1_EL1" ",%0 \n\t"::"r"(*this));}



class RegPAR_EL1{
public:
    union{
        struct{
        uint64_t F:1;
        uint64_t RES0_0:6;
        uint64_t SH:2;
        uint64_t NS:1;
        uint64_t IMP_DEF:1;
        uint64_t RES1_1:1;
        uint64_t PA47_12:36;
        uint64_t PA51_48:4;
        uint64_t RES0_2:4;
        uint64_t ATTR:8;
       }__attribute__((packed)) S0;

        struct{
        uint64_t F:1;
        uint64_t FST:6;
        uint64_t RES0_0:1;
        uint64_t PTW:1;
        uint64_t S:1;
        uint64_t RES0_1:1;
        uint64_t RES1_2:1;
        uint64_t RES0_3:36;
        uint64_t IMP_DEF0:4;
        uint64_t IMP_DEF1:4;
        uint64_t IMP_DEF2:8;
       }__attribute__((packed)) S1;

    }__attribute__((packed));

        __attribute__((always_inline)) inline void dump()const
        {
            kout << "PAR_EL1 : ";
            if(S0.F==0)
            {
             kout
                <<"S0.F = "<< S0.F << ","
                <<"S0.RES0_0 = "<< S0.RES0_0 << ","
                <<"S0.SH = "<< S0.SH << ","
                <<"S0.NS = "<< S0.NS << ","
                <<"S0.IMP_DEF = "<< S0.IMP_DEF << ","
                <<"S0.RES1_1 = "<< S0.RES1_1 << ","
                <<"S0.PA47_12 = "<< Hex(S0.PA47_12) << ","
                <<"S0.PA51_48 = "<< Hex(S0.PA51_48) << ","
                <<"S0.RES0_2 = "<< S0.RES0_2 << ","
                <<"S0.ATTR = "<< S0.ATTR;
            }
            else
            {
             kout
                <<"S1.F = "<< S1.F << ","
                <<"S1.FST = "<< S1.FST << ","
                <<"S1.RES0_0 = "<< S1.RES0_0 << ","
                <<"S1.PTW = "<< S1.PTW << ","
                <<"S1.S = "<< S1.S << ","
                <<"S1.RES0_1 = "<< S1.RES0_1 << ","
                <<"S1.RES1_2 = "<< S1.RES1_2 << ","
                <<"S1.RES0_3 = "<< S1.RES0_3 << ","
                <<"S1.IMP_DEF0 = "<< S1.IMP_DEF0 << ","
                <<"S1.IMP_DEF1 = "<< S1.IMP_DEF1 << ","
                <<"S1.IMP_DEF2 = "<< S1.IMP_DEF2;
            }
             kout << "\n";
        }
        __attribute__((always_inline)) inline static RegPAR_EL1 read();
        __attribute__((always_inline)) inline RegPAR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegPAR_EL1 RegPAR_EL1::read(){ RegPAR_EL1 res;__asm__ __volatile__("mrs %0," "PAR_EL1" "\n\t":"=r"(res));return res;}
RegPAR_EL1 RegPAR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "PAR_EL1" "\n\t":"=r"(*this));return *this;}
void RegPAR_EL1::write() const { __asm__ __volatile__("msr " "PAR_EL1" ",%0 \n\t"::"r"(*this));}



class RegMAIR_EL1{
public:
        uint64_t Attr0:8;
        uint64_t Attr1:8;
        uint64_t Attr2:8;
        uint64_t Attr3:8;
        uint64_t Attr4:8;
        uint64_t Attr5:8;
        uint64_t Attr6:8;
        uint64_t Attr7:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MAIR_EL1 : "
                <<"Attr0 = "<< Hex(Attr0) << ","
                <<"Attr1 = "<< Hex(Attr1) << ","
                <<"Attr2 = "<< Hex(Attr2) << ","
                <<"Attr3 = "<< Hex(Attr3) << ","
                <<"Attr4 = "<< Hex(Attr4) << ","
                <<"Attr5 = "<< Hex(Attr5) << ","
                <<"Attr6 = "<< Hex(Attr6) << ","
                <<"Attr7 = "<< Hex(Attr7)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMAIR_EL1 read();
        __attribute__((always_inline)) inline RegMAIR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMAIR_EL1 RegMAIR_EL1::read(){ RegMAIR_EL1 res;__asm__ __volatile__("mrs %0," "MAIR_EL1" "\n\t":"=r"(res));return res;}
RegMAIR_EL1 RegMAIR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "MAIR_EL1" "\n\t":"=r"(*this));return *this;}
void RegMAIR_EL1::write() const { __asm__ __volatile__("msr " "MAIR_EL1" ",%0 \n\t"::"r"(*this));}



class RegMAIR_EL2{
public:
        uint64_t Attr0:8;
        uint64_t Attr1:8;
        uint64_t Attr2:8;
        uint64_t Attr3:8;
        uint64_t Attr4:8;
        uint64_t Attr5:8;
        uint64_t Attr6:8;
        uint64_t Attr7:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MAIR_EL2 : "
                <<"Attr0 = "<< Hex(Attr0) << ","
                <<"Attr1 = "<< Hex(Attr1) << ","
                <<"Attr2 = "<< Hex(Attr2) << ","
                <<"Attr3 = "<< Hex(Attr3) << ","
                <<"Attr4 = "<< Hex(Attr4) << ","
                <<"Attr5 = "<< Hex(Attr5) << ","
                <<"Attr6 = "<< Hex(Attr6) << ","
                <<"Attr7 = "<< Hex(Attr7)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMAIR_EL2 read();
        __attribute__((always_inline)) inline RegMAIR_EL2 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMAIR_EL2 RegMAIR_EL2::read(){ RegMAIR_EL2 res;__asm__ __volatile__("mrs %0," "MAIR_EL2" "\n\t":"=r"(res));return res;}
RegMAIR_EL2 RegMAIR_EL2::updateRead(){ __asm__ __volatile__("mrs %0," "MAIR_EL2" "\n\t":"=r"(*this));return *this;}
void RegMAIR_EL2::write() const { __asm__ __volatile__("msr " "MAIR_EL2" ",%0 \n\t"::"r"(*this));}



class RegMAIR_EL3{
public:
        uint64_t Attr0:8;
        uint64_t Attr1:8;
        uint64_t Attr2:8;
        uint64_t Attr3:8;
        uint64_t Attr4:8;
        uint64_t Attr5:8;
        uint64_t Attr6:8;
        uint64_t Attr7:8;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "MAIR_EL3 : "
                <<"Attr0 = "<< Hex(Attr0) << ","
                <<"Attr1 = "<< Hex(Attr1) << ","
                <<"Attr2 = "<< Hex(Attr2) << ","
                <<"Attr3 = "<< Hex(Attr3) << ","
                <<"Attr4 = "<< Hex(Attr4) << ","
                <<"Attr5 = "<< Hex(Attr5) << ","
                <<"Attr6 = "<< Hex(Attr6) << ","
                <<"Attr7 = "<< Hex(Attr7)
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegMAIR_EL3 read();
        __attribute__((always_inline)) inline RegMAIR_EL3 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegMAIR_EL3 RegMAIR_EL3::read(){ RegMAIR_EL3 res;__asm__ __volatile__("mrs %0," "MAIR_EL3" "\n\t":"=r"(res));return res;}
RegMAIR_EL3 RegMAIR_EL3::updateRead(){ __asm__ __volatile__("mrs %0," "MAIR_EL3" "\n\t":"=r"(*this));return *this;}
void RegMAIR_EL3::write() const { __asm__ __volatile__("msr " "MAIR_EL3" ",%0 \n\t"::"r"(*this));}



class RegSCTLR_EL1{
public:
        uint32_t M:1;
        uint32_t A:1;
        uint32_t C:1;
        uint32_t SA:1;
        uint32_t SA0:1;
        uint32_t CP15BEN:1;
        uint32_t RES0_0:1;
        uint32_t ITD:1;
        uint32_t SED:1;
        uint32_t UMA:1;
        uint32_t RES0_1:1;
        uint32_t RES1_2:1;
        uint32_t I:1;
        uint32_t RES0_3:1;
        uint32_t DZE:1;
        uint32_t UCT:1;
        uint32_t nTWI:1;
        uint32_t RES0_4:1;
        uint32_t nTWE:1;
        uint32_t WXN:1;
        uint32_t RES1_5:1;
        uint32_t IESB:1;
        uint32_t RES1_6:1;
        uint32_t SPAN:1;
        uint32_t E0E:1;
        uint32_t EE:1;
        uint32_t UCI:1;
        uint32_t RES0_7:1;
        uint32_t nTLSMD:1;
        uint32_t LSMAOE:1;
        uint32_t RES0_8:2;
        __attribute__((always_inline)) inline void dump()const
        {
            kout << "SCTLR_EL1 : "
                <<"M = "<< M << ","
                <<"A = "<< A << ","
                <<"C = "<< C << ","
                <<"SA = "<< SA << ","
                <<"SA0 = "<< SA0 << ","
                <<"CP15BEN = "<< CP15BEN << ","
                <<"RES0_0 = "<< RES0_0 << ","
                <<"ITD = "<< ITD << ","
                <<"SED = "<< SED << ","
                <<"UMA = "<< UMA << ","
                <<"RES0_1 = "<< RES0_1 << ","
                <<"RES1_2 = "<< RES1_2 << ","
                <<"I = "<< I << ","
                <<"RES0_3 = "<< RES0_3 << ","
                <<"DZE = "<< DZE << ","
                <<"UCT = "<< UCT << ","
                <<"nTWI = "<< nTWI << ","
                <<"RES0_4 = "<< RES0_4 << ","
                <<"nTWE = "<< nTWE << ","
                <<"WXN = "<< WXN << ","
                <<"RES1_5 = "<< RES1_5 << ","
                <<"IESB = "<< IESB << ","
                <<"RES1_6 = "<< RES1_6 << ","
                <<"SPAN = "<< SPAN << ","
                <<"E0E = "<< E0E << ","
                <<"EE = "<< EE << ","
                <<"UCI = "<< UCI << ","
                <<"RES0_7 = "<< RES0_7 << ","
                <<"nTLSMD = "<< nTLSMD << ","
                <<"LSMAOE = "<< LSMAOE << ","
                <<"RES0_8 = "<< RES0_8
                  << "\n";
        }
        __attribute__((always_inline)) inline static RegSCTLR_EL1 read();
        __attribute__((always_inline)) inline RegSCTLR_EL1 updateRead();
        __attribute__((always_inline)) inline void write()const;
}__attribute__((packed));
RegSCTLR_EL1 RegSCTLR_EL1::read(){ RegSCTLR_EL1 res;__asm__ __volatile__("mrs %0," "SCTLR_EL1" "\n\t":"=r"(res));return res;}
RegSCTLR_EL1 RegSCTLR_EL1::updateRead(){ __asm__ __volatile__("mrs %0," "SCTLR_EL1" "\n\t":"=r"(*this));return *this;}
void RegSCTLR_EL1::write() const { __asm__ __volatile__("msr " "SCTLR_EL1" ",%0 \n\t"::"r"(*this));}
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/asm_instructions.h" 2



#define FORCE_CODE_COHERENT_WITH_VIEW() L ## __LINE__:

#define ASM_DEFINE_LOCAL_SYM(sym) __asm__sym__ ##sym: __asm__ __volatile__(__stringify(sym) ":\n\t")
#define ASM_DEFINE_GLOBAL_SYM(sym) __asm__sym__ ##sym:__asm__ __volatile__(".global " __stringify(sym) " \n\t;" __stringify(sym) ":\n\t")
#define ASM_LDR_REG(reg,val) __asm__ __volatile__("")
#define ASM_PUSHX_REG() 
#define ASM_PUSHX() 
#define ASM_POPX_REG() 
#define ASM_POPX() 
#define ASM_PUSHW_REG() 
#define ASM_PUSHW() 
#define ASM_POPW_REG() 
#define ASM_POPW() 
#define ASM_GOTO(sym) __asm__ __volatile__("b " __stringify(sym) " \n\t")




__attribute__((always_inline)) inline void asm_nop();
__attribute__((always_inline)) inline void asm_isb();
__attribute__((always_inline)) inline void asm_eret();
__attribute__((always_inline)) inline RegPAR_EL1 asm_at(uint64_t va);
__attribute__((always_inline)) inline void asm_svc(uint16_t imm);
__attribute__((always_inline)) inline void asm_wfe();
__attribute__((always_inline)) inline void asm_wfe_loop();



void asm_nop()
{
 __asm__ __volatile__("nop \n\t");
}
void asm_isb()
{
 __asm__ __volatile__("isb \n\t");
}
void asm_eret()
{
 __asm__ __volatile__("eret \n\t");
}
RegPAR_EL1 asm_at(uint64_t va)
{
 __asm__ __volatile__("at S1E1R,%0 \n\t"::"r"(va));
 return RegPAR_EL1::read();
}
void asm_svc(uint16_t imm)
{
 __asm__ __volatile__("svc %0"::"i"(imm));
}
void asm_wfe()
{
 __asm__ __volatile__("wfe \n\t");
}
void asm_wfe_loop()
{
 while(true)
  asm_wfe();
}
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h" 2
enum ExceptionClass{
 UNDEF_INST=0b000000,
 INSTR_ABORT_LOWER_EL = 0b100000,
 INSTR_ABORT_SAME_EL = 0b100001,
 PC_ALIGNMENT_FAULT = 0b100010,
 DATA_ABORT_LOWER_EL = 0b100100,
 DATA_ABORT_SAME_EL = 0b100101,
 SP_ALIGNMENT_FAULT = 0b100110,
 SERROR_INTERRUPT = 0b101111,
 SVC_AA64=0b010101,
 HVC_AA64 = 0b010110,
 SMC_AA64 = 0b010111,
};

#define SAVE_REGS_ASM_INSTR "stp x29,x30,[sp,#-16]! \n\t" "stp x27,x28,[sp,#-16]! \n\t" "stp x25,x26,[sp,#-16]! \n\t" "stp x23,x24,[sp,#-16]! \n\t" "stp x21,x22,[sp,#-16]! \n\t" "stp x19,x20,[sp,#-16]! \n\t" "stp x17,x18,[sp,#-16]! \n\t" "stp x15,x16,[sp,#-16]! \n\t" "stp x13,x14,[sp,#-16]! \n\t" "stp x11,x12,[sp,#-16]! \n\t" "stp x9,x10,[sp,#-16]! \n\t" "stp x7,x8,[sp,#-16]! \n\t" "stp x5,x6,[sp,#-16]! \n\t" "stp x3,x4,[sp,#-16]! \n\t" "stp x1,x2,[sp,#-16]! \n\t" "str x0,[sp,#-8]! \n\t"
# 45 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h"
#define RESTORE_REGS_ASM_INSTR_X0_X28(base) "ldr x0,[" __stringify(base) "],#8 \n\t" "ldp x1,x2,[" __stringify(base) "],#16 \n\t" "ldp x3,x4,[" __stringify(base) "],#16 \n\t" "ldp x5,x6,[" __stringify(base) "],#16 \n\t" "ldp x7,x8,[" __stringify(base) "],#16 \n\t" "ldp x9,x10,[" __stringify(base) "],#16 \n\t" "ldp x11,x12,[" __stringify(base) "],#16 \n\t" "ldp x13,x14,[" __stringify(base) "],#16 \n\t" "ldp x15,x16,[" __stringify(base) "],#16 \n\t" "ldp x17,x18,[" __stringify(base) "],#16 \n\t" "ldp x19,x20,[" __stringify(base) "],#16 \n\t" "ldp x21,x22,[" __stringify(base) "],#16 \n\t" "ldp x23,x24,[" __stringify(base) "],#16 \n\t" "ldp x25,x26,[" __stringify(base) "],#16 \n\t" "ldp x27,x28,[" __stringify(base) "],#16 \n\t"
# 62 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/exceptions.h"
#define RESTORE_REGS_ASM_INSTR RESTORE_REGS_ASM_INSTR_X0_X28(sp) "ldp x29,x30,[sp],#16 \n\t"




#define RESTORE_REGS_ASM_INSTR_X30_BASE RESTORE_REGS_ASM_INSTR_X0_X28(x30) "ldp x29,x30,[x30]\n\t"






#define SAVE_REGS() __asm__ __volatile__( SAVE_REGS_ASM_INSTR )



#define RESTORE_REGS() __asm__ __volatile__( RESTORE_REGS_ASM_INSTR )
# 11 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/arch/common_aarch64/exception/svc_call.h" 2



enum class SvcFunc{

 puts,
 allocateBlock,
 killProcess,
};



template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call();
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0);
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0,uint64_t arg1);
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2);
template <SvcFunc func>
__attribute__((always_inline)) inline uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2,uint64_t arg3);



template <SvcFunc func>
uint64_t svc_call()
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__(
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func):"x0");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0):"x0");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0,uint64_t arg1)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "mov  x1, %3  \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0),"r"(arg1):"x0","x1");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "mov  x1, %3  \n\t"
      "mov  x2, %4 \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0),"r"(arg1),"r"(arg2):"x0","x1","x2");
 return res;
}
template <SvcFunc func>
uint64_t svc_call(uint64_t arg0,uint64_t arg1,uint64_t arg2,uint64_t arg3)
{
 uint64_t res=0;
 L__LINE__:;
 __asm__ __volatile__("mov x0, %2 \n\t"
      "mov  x1, %3  \n\t"
      "mov  x2, %4 \n\t"
      "mov  x3, %5  \n\t"
      "svc %1 \n\t"
      "str x0,%0 \n\t"
      :"=m"(res):"i"(func),"r"(arg0),"r"(arg1),"r"(arg2),"r"(arg3):"x0","x1","x2","x3");
 return res;
}
# 3 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/user_space/user_main_hello_kernel.cpp" 2


# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
#define INCLUDE_MEMORYMANAGER_H_ 


# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h"
#define INCLUDE_MEMORYCHUNK_H_ 
# 22 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h"
class MemoryChunk{
public:

 enum { ValidBits = 6, IsEndBits=1,AllocatedBits=1,SizeBits=38,NextBaseBits=18};
 enum { MaxSinlgeMoveBytes = (1 << ValidBits) };
 MemoryChunk(size_t size,bool allocated,size_t nextValidChunkOffset,bool endMark,size_t nextBaseFromEnd);
 bool isAllocated() const;
 void setAllocated(bool allocated);
 bool isEnd() const;
 void setEnd(bool end);
 const MemoryChunk* getNext()const;
 MemoryChunk* getNext();
 size_t getSize() const;
 void setSize(size_t size);
 void* getDataPtr();
 const void * getDataPtr()const;
 void* getDataEnd();
 const void * getDataEnd()const;
 uint64_t getNextBaseFromEnd() const;
 void setNextBaseFromEnd(uint64_t nextBaseFromEnd);
 uint64_t getNextValidChunkOffset() const;
 void setNextValidChunkOffset(uint64_t nextValidChunkOffset );
# 54 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryChunk.h"
 MemoryChunk* moveAhead(size_t moveSize);

 size_t moveOffsetOfAllocSuchAlignedSpace(size_t allocSize,size_t alignment)const;

 bool split(size_t splitSize);



 void mergeTrailingsUnallocated();


private:
 uint64_t nextValidChunkOffset :ValidBits;
 uint64_t endMark :IsEndBits;
 uint64_t allocated :AllocatedBits;
 uint64_t size :SizeBits;
 uint64_t nextBaseFromEnd :NextBaseBits;
}__attribute__((packed));
# 13 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 2
# 25 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
class MemoryManager{
public:
 enum { CHUNK_SIZE = sizeof(MemoryChunk), MINIMAL_ALLOC_SIZE = sizeof(size_t), MINIMAL_ALIGNMENT = sizeof(size_t) };
 MemoryManager()=delete;



 MemoryManager(void *base,size_t size,bool initChunks=true);
public:

 size_t normalizeAllocSize(size_t n);


 void* allocate(size_t n);


 void* allocate(size_t n,size_t alignment);
 template <class T>
 T allocateAs(size_t n);
 template <class T>
 T allocateAs(size_t n,size_t alignment);
# 55 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
 bool tryIncrease(void *origin,size_t incSize);
 bool tryDecrease(void *origin,size_t decSize);
# 65 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h"
 void* reallocate(void *origin,size_t newSize,size_t oldSize = 0xffffffffffffffffUL);

 template <class T>
 T reallocateAs(void *origin,size_t newSize,size_t oldSize = 0xffffffffffffffffUL);





 void deallocate(void *p);





 size_t getAllocatedLength(void *origin)const;


private:
 MemoryChunk *headChunk;
 const char *base;
 const size_t size;
};



extern MemoryManager mman;

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/MemoryManager.h" 1
# 9 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/MemoryManager.h"
#define INCLUDE_TEMPLATES_IMPLEMENTATION_MEMORYMANAGER_H_ 

# 1 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 1
# 12 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/templates_implementation/MemoryManager.h" 2


template <class T>
T MemoryManager::allocateAs(size_t n)
{
 return reinterpret_cast<T>(this->allocate(n));
}
template <class T>
T MemoryManager::allocateAs(size_t n,size_t alignment)
{
 return reinterpret_cast<T>(this->allocate(n,alignment));
}

template <class T>
T MemoryManager::reallocateAs(void *origin,size_t newSize,size_t oldSize)
{
 return reinterpret_cast<T>(reallocate(origin, newSize,oldSize));
}
# 94 "D:\\Pool\\eclipse-workspace_aarch64\\newspace\\raspiOS\\include/memory/MemoryManager.h" 2
# 6 "D:/Pool/eclipse-workspace_aarch64/newspace/raspiOS/src/arch/user_space/user_main_hello_kernel.cpp" 2



int main()
{

 auto num=svc_call<SvcFunc::puts>(reinterpret_cast<uint64_t>("Hello Kernel\n"),0);


 kout << "Using kout to ouput, num = " << Hex(num) << "\n";
 kout.flush();

 void *p=mman.allocate(100);
 kout << "allocated != nullptr?" << (p!=nullptr) << "\n";
 kout.flush();

 mman.deallocate(p);
 return 0;
}
