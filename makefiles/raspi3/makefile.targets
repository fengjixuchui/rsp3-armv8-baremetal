include ${ROOT_PROJECT}/makefiles/qemu_common/makefile.targets
include ${ROOT_PROJECT}/makefiles/aarch64_common/makefile.aarch64_ALL_REGISTERS.targets
ROOT_PATH ?=/cygdrive/e
# this is for rasp berry pi
# 测试UART0的初始化过程：
# 1.经过测试，在没有gpu mailbox操作的情况下，dtoverlay=pi3-disable-bt (optional + enable_uart=1) 输出乱码
# 而在有gpu mailbox操作的情况下，不加任何一个选项，都能正常工作。
# 2.在注释了GPIO的初始化过程后，dtoverlay=pi3-disable-bt  (optional + enable_uart=1) 不能输出
# 3.
config.$(TARGET_ARCH).txt:makefile.eclipse.envs
	kernel_address=$$(($(RAM_START) + $(DTB_SIZE) + $(STACK_SIZE)))
	gpu_mem_MB=$$(($(VIDEO_RAM_SIZE)/1024/1024))
	(echo '##======Automatically generated==========##'
	echo 'kernel=$(MASTERY_BINARY)'
	echo 'kernel_address='$$kernel_address
	echo 'arm_64bit=1'
	echo '#gpu_mem='$${gpu_mem_MB}
	echo 'disable_commandline_tags=1'
	echo '# 下面三个在baremetal环境下并不是必须的，只要正确设置了GPIO即可'
	echo '#enable_uart=1'
	echo '#dtoverlay=pi3-disable-bt'
	echo '#dtoverlay=pi3-miniuart-bt'
	echo '##=====THE END======##'
	) > config.$(TARGET_ARCH).txt

$(ROOT_PATH)/config.$(TARGET_ARCH).txt : config.$(TARGET_ARCH).txt
	cp $< $@
$(ROOT_PATH)/$(MASTERY_BINARY) : $(MASTERY_BINARY)
	cp $< $@
install : $(ROOT_PATH)/$(MASTERY_BINARY) $(ROOT_PATH)/config.$(TARGET_ARCH).txt
	
	

    
userSpaceBin := $(ROOT_PROJECT)/subprojects/user_space/Debug/user_space.bin
$(MASTERY_BINARY): $(MASTERY_ELF)
	$(TOOLCHAIN_OBJCOPY) -O binary $(MASTERY_ELF) $@
	userSpaceStart=$$(($(CODE_SIZE) + + $(INITRAM_SIZE)))
	count=$$(($(USER_SPACE_SIZE)))
	dd if=$(userSpaceBin) of=$@ seek=$$userSpaceStart bs=1c count=$$count
    
$(MASTERY_RELOC) : $(MASTERY_ELF)
	mv $(MASTERY_ELF) $(MASTERY_ELF).temp
	$(MAKE) RAM_START=0xffffff0000000000 $(MASTERY_ELF)
	mv $(MASTERY_ELF) $@
	mv $(MASTERY_ELF).temp $(MASTERY_ELF)
$(MASTERY_RELOC_BIN) : $(MASTERY_RELOC)
	$(TOOLCHAIN_OBJCOPY) -O binary $(MASTERY_RELOC) $@

# -cpu cortex-a53 -smp 4  -m 1024M  # 都有default值, 不能设置smp为其他值。
# 可以增加 -serial mon:stdio ，来redirect 第二个。 但是注意，这样输入就会有问题
# 
QEMU_LOADER_NO_MACHINE := -device loader,file=$(MASTERY_BINARY),addr=$(KERNEL_ADDRESS),cpu-num=0 -device loader,cpu-num=1,addr=$(KERNEL_ADDRESS) -device loader,cpu-num=2,addr=$(KERNEL_ADDRESS) -device loader,cpu-num=3,addr=$(KERNEL_ADDRESS) -nographic -serial mon:stdio -d int,mmu,guest_errors -D qemu_log.txt
QEMU_ARGS := $(QEMU_LOADER_NO_MACHINE) -machine raspi3 -sd fat32.img
raspi3_debug:
	$(QEMU_AARCH64) $(QEMU_ARGS) -S -s
raspi3_run:
	$(QEMU_AARCH64) $(QEMU_ARGS)
#AUX_FILES += update-config.$(TARGET_ARCH).txt