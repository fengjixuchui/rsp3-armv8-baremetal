include ${ROOT_PROJECT}/makefiles/qemu_common/makefile.targets
include ${ROOT_PROJECT}/makefiles/aarch64_common/makefile.aarch64_ALL_REGISTERS.targets
ROOT_PATH ?=/cygdrive/e
# this is for rasp berry pi
# 测试UART0的初始化过程：
# 1.经过测试，在没有gpu mailbox操作的情况下，
#         dtoverlay=pi3-disable-bt (optional + enable_uart=1) 输出乱码
# 而在有gpu mailbox操作的情况下，不加任何一个选项，都能正常工作。
# 2.在注释了GPIO的初始化过程后，dtoverlay=pi3-disable-bt  (optional + enable_uart=1) 不能输出
# 3.
config.$(TARGET_ARCH).txt:makefile.eclipse.envs
	gpu_mem_MB=$$(($(VIDEO_RAM_SIZE)/1024/1024))
	(echo '##======Automatically generated==========##'
	echo 'kernel=$(MASTERY_BINARY)'
	echo 'kernel_address='$(KERNEL_ADDRESS)
	echo 'arm_64bit=1'
	echo '#gpu_mem='$${gpu_mem_MB}
	echo 'disable_commandline_tags=1'
	echo '# 下面三个在baremetal环境下并不是必须的，只要正确设置了GPIO即可'
	echo '#enable_uart=1'
	echo '#dtoverlay=pi3-disable-bt'
	echo '#dtoverlay=pi3-miniuart-bt'
	echo '##=====THE END======##'
	) > config.$(TARGET_ARCH).txt

$(ROOT_PATH)/config.$(TARGET_ARCH).txt : config.$(TARGET_ARCH).txt
	cp $< $@
$(ROOT_PATH)/$(MASTERY_BINARY) : $(MASTERY_BINARY)
	cp $< $@
install : $(ROOT_PATH)/$(MASTERY_BINARY) $(ROOT_PATH)/config.$(TARGET_ARCH).txt


define elf_to_bin
	$(TOOLCHAIN_OBJCOPY) -O binary $1 $2
endef
# bin_add OF IF SEEK COUNT
define bin_add
	
endef 
userSpaceBin := $(ROOT_PROJECT)/subprojects/user_space/Debug/user_space.bin
# makefile接收的环境参数： CODE_PART IMAGE_BASE
# part1使用默认参数
part1.bin:$(MASTERY_ELF)
	$(call elf_to_bin,$<,$@)

# 2是依赖于1的，但是环境又不同
$(MASTERY_ELF).2:$(MASTERY_ELF)
	mv $(MASTERY_ELF) $(MASTERY_ELF).temp
	$(MAKE) CODE_PART=2 IMAGE_BASE=0xffffff0000000000 $(MASTERY_ELF)
	mv $(MASTERY_ELF) $@
	mv $(MASTERY_ELF).temp $(MASTERY_ELF)

# part2.bin和part2.bin_recalled之间的协作：通过$(MASTERY_ELF).2来传递依赖性
part2.bin:$(MASTERY_ELF).2
	$(MAKE) CODE_PART=2 IMAGE_BASE=0xffffff0000000000 part2.bin_recalled
part2.bin_recalled:$(MASTERY_ELF).2
	$(call elf_to_bin,  $(MASTERY_ELF).2,  part2.bin)
	dd if=$(userSpaceBin) of=part2.bin seek=$(USER_SPACE_DD_START) \
			bs=1c count=$(USER_SPACE_SIZE)

# 使用truncate 确保第一部分是CODE_SIZE大小
$(MASTERY_BINARY):part1.bin part2.bin
	cp part2.bin $@ &&
	truncate -s $(SINGLE_GEN_SIZE) $@ &&
	cat part1.bin >> $@

# -cpu cortex-a53 -smp 4  -m 1024M  # 都有default值, 不能设置smp为其他值。
# 可以增加 -serial mon:stdio ，来redirect 第二个。 但是注意，这样输入就会有问题
# 
QEMU_LOADER_NO_MACHINE := \
-device loader,file=$(MASTERY_BINARY),addr=$(LOADER_ADDRESS) \
-device loader,cpu-num=0,addr=$(KERNEL_ADDRESS) \
-device loader,cpu-num=1,addr=$(KERNEL_ADDRESS) \
-device loader,cpu-num=2,addr=$(KERNEL_ADDRESS) \
-device loader,cpu-num=3,addr=$(KERNEL_ADDRESS) \
-nographic  -d int,mmu,guest_errors -D qemu_log.txt

QEMU_LOADER_NO_MACHINE_SERIAL0 := $(QEMU_LOADER_NO_MACHINE) -serial mon:stdio
QEMU_LOADER_NO_MACHINE_SERIAL1 := $(QEMU_LOADER_NO_MACHINE) -serial null \
	-serial mon:stdio
QEMU_LOADER_NO_MACHINE_SERIAL01 := $(QEMU_LOADER_NO_MACHINE) -serial mon:stdio \
	-serial mon:stdio
# DOCME fat32_8192_empty.img指的是，有效数据从8192扇区开始
QEMU_ARGS := $(QEMU_LOADER_NO_MACHINE_SERIAL01) -machine raspi3 -sd fat32_8192_empty.img
raspi3_debug:
	$(QEMU_AARCH64) $(QEMU_ARGS) -S -s
raspi3_run:
	$(QEMU_AARCH64) $(QEMU_ARGS)
raspi3_run_miniuart:
	$(QEMU_AARCH64) $(QEMU_LOADER_NO_MACHINE_SERIAL1) -machine raspi3 -sd fat32_8192_empty.img
#AUX_FILES += update-config.$(TARGET_ARCH).txt

# $(TOOLCHAIN_AR) -t libxxx.a 可以查看内容
# 删除crt0即可,因此，crt0是不可更改的。
libprefix.a:$(OBJS)
	$(TOOLCHAIN_AR) -rcs $@ $(OBJS)
	$(TOOLCHAIN_AR) -d $@ src/arch/raspi3/crt0.o 
	
prefix.elf:libprefix.a
	aarch64-elf-g++ $(USER_LINKER_FLAGS) -o $@ src/arch/raspi3/crt0.o \
	 	$<
prefix.bin:prefix.elf
	$(TOOLCHAIN_OBJCOPY) -O binary $< $@

.PHONY:help
help:
	@echo 'targets are:'
	echo '    qemu related:raspi3_debug raspi3_run raspi3_run_miniuart'
	echo '    hardware    :install'