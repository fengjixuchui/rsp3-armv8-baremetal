include ${ROOT_PROJECT}/makefiles/qemu_common/makefile.targets
include ${ROOT_PROJECT}/makefiles/aarch64_common/makefile.aarch64_ALL_REGISTERS.targets

QEMU_ARGS := -machine virt,gic-version=3 -cpu cortex-a53 -smp 1 -m 1024M -nographic -serial mon:stdio -bios $(MASTERY_BINARY) -drive file=virtio.bin,format=raw,if=none,index=0,id=vio0 -device virtio-blk-device,drive=vio0 -d int,mmu,guest_errors -D qemu_log.txt 

.PHONY:qemu-run qemu-debug
# if only using secure=on,then EL=3
# if only using virtualization=on, EL=2
# if none of them is used,using EL1
# default secure=off,virtualization=off
qemu_run:
	$(QEMU_AARCH64) $(QEMU_ARGS)
qemu_debug:
	$(QEMU_AARCH64) $(QEMU_ARGS) -S -s
qemu_virt.dts:
	$(QEMU_AARCH64) -machine virt,gic-version=3,dumpdtb=qemu_virt.dtb -cpu cortex-a53 -smp 1 -m 1G -nographic -serial mon:stdio  -bios $(MASTERY_BINARY) -d int,mmu -D qemu_log.txt
	$(DTC) -I dtb -O dts -o $@ qemu_virt.dtb

# 通过dd将用户程序嵌入到内核镜像中
userSpaceBin := $(ROOT_PROJECT)/subprojects/user_space/Debug/user_space.bin
# 注意,MASTERY_RELOC必须在MASTERY_ELF之前
$(MASTERY_BINARY):FORCE
	@$(RM) $@ $(MASTERY_RELOC) $(MASTERY_ELF)
	$(MAKE) $(MASTERY_RELOC)
	# 最多尝试try次make $(MASTERY_ELF)，如果没有，就退出
	try=2
	while true;do 
		if [[ -f $(MASTERY_ELF) || $${try} -eq 0 ]];then 
			break 
		else  
			$(MAKE) $(MASTERY_ELF)
			if [[ ! $$? -eq 0 ]];then #有错误
				break
			fi
			try=$$((try-1))
		fi 
	done 
	if [[ ! -f $(MASTERY_ELF) ]];then
		echo '$(MASTERY_LEF) still does not exist'
		exit 1
	fi
	$(TOOLCHAIN_OBJCOPY) -O binary $(MASTERY_ELF) $@
	dd if=$(userSpaceBin) of=$@ seek=$(USER_SPACE_START) bs=1c count=$(USER_SPACE_SIZE)


$(MASTERY_RELOC):
	# 改变IMAGE_BASE的值，然后编译生成即可
	$(MAKE) IMAGE_BASE=0xffffff0000000000 $(MASTERY_ELF)
	mv $(MASTERY_ELF) $@
dump_reloc:
	$(TOOLCHAIN_OBJDUMP) -D $(MASTERY_RELOC)|less
.PHONY:dump-reloc

# CLEAN-ALL-LIST增加
CLEAN-ALL-LIST += $(MASTERY_RELOC) $(MASTERY_BINARY) $(MASTERY_ELF)