//=====Automatically generated by python 3.6.4
//== working directory: /cygdrive/d/Pool/eclipse-workspace_aarch64/newspace/raspiOS/subprojects/python3_gen_engine/src
//== ../../../subprojects/python3_gen_engine/src/GenEngine.py  ../../../subprojects/python3_gen_engine/src/reg_defs/gicv3_registers.py  ../../../include/arch/common_aarch64/registers/gicv3_registers.h
#ifndef __INCLUDE_ARCH_COMMON_AARCH64_REGISTERS_GICV3_REGISTERS_H__
#define __INCLUDE_ARCH_COMMON_AARCH64_REGISTERS_GICV3_REGISTERS_H__
#include <def.h>


class RegICC_BPR0_EL1 {
public:

            uint32_t  BinaryPoint:3;
            uint32_t  RES0_0:29;


    AS_MACRO RegICC_BPR0_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_BPR0_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_BPR0_EL1: ";
            kout
                << "BinaryPoint = " << BinaryPoint << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_BPR0_EL1 read()
    { 
        RegICC_BPR0_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_8_3\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_BPR0_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_8_3\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_BPR0_EL1 & setMandatoryFields()
    {
        BinaryPoint = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_8_3,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_BPR1_EL1 {
public:

            uint32_t  BinaryPoint:3;
            uint32_t  RES0_0:29;


    AS_MACRO RegICC_BPR1_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_BPR1_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_BPR1_EL1: ";
            kout
                << "BinaryPoint = " << BinaryPoint << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_BPR1_EL1 read()
    { 
        RegICC_BPR1_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_3\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_BPR1_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_3\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_BPR1_EL1 & setMandatoryFields()
    {
        BinaryPoint = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_3,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_CTLR_EL3 {
public:

            uint32_t  CBPR_EL1S:1;
            uint32_t  CBPR_EL1NS:1;
            uint32_t  EOImode_EL3:1;
            uint32_t  EOImode_EL1S:1;
            uint32_t  EOImode_EL1NS:1;
            uint32_t  RM:1;
            uint32_t  PMHE:1;
            uint32_t  RES0_0:1;
            uint32_t  PRIbits:3;
            uint32_t  IDbits:3;
            uint32_t  SEIS:1;
            uint32_t  A3V:1;
            uint32_t  RES0_1:1;
            uint32_t  nDS:1;
            uint32_t  RSS:1;
            uint32_t  RES0_2:13;


    AS_MACRO RegICC_CTLR_EL3(uint32_t v)            {set(v);}
    AS_MACRO RegICC_CTLR_EL3& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_CTLR_EL3: ";
            kout
                << "CBPR_EL1S = " << CBPR_EL1S << ", "
                << "CBPR_EL1NS = " << CBPR_EL1NS << ", "
                << "EOImode_EL3 = " << EOImode_EL3 << ", "
                << "EOImode_EL1S = " << EOImode_EL1S << ", "
                << "EOImode_EL1NS = " << EOImode_EL1NS << ", "
                << "RM = " << RM << ", "
                << "PMHE = " << PMHE << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "PRIbits = " << PRIbits << ", "
                << "IDbits = " << IDbits << ", "
                << "SEIS = " << SEIS << ", "
                << "A3V = " << A3V << ", "
                << "RES0_1 = " << RES0_1 << ", "
                << "nDS = " << nDS << ", "
                << "RSS = " << RSS << ", "
                << "RES0_2 = " << RES0_2 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_CTLR_EL3 read()
    { 
        RegICC_CTLR_EL3 res;
        __asm__ __volatile__("mrs %0,s3_6_c12_12_4\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_CTLR_EL3 & update()
    {
        __asm__ __volatile__("mrs %0,s3_6_c12_12_4\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_CTLR_EL3 & setMandatoryFields()
    {
        CBPR_EL1S = 0;
        CBPR_EL1NS = 0;
        EOImode_EL3 = 0;
        EOImode_EL1S = 0;
        EOImode_EL1NS = 0;
        RM = 0;
        PMHE = 0;
        RES0_0 = 0;
        PRIbits = 0;
        IDbits = 0;
        SEIS = 0;
        A3V = 0;
        RES0_1 = 0;
        nDS = 0;
        RSS = 0;
        RES0_2 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_6_c12_12_4,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_CTLR_EL1 {
public:

            uint32_t  CBPR:1;
            uint32_t  EOImode:1;
            uint32_t  RES0_0:4;
            uint32_t  PMHE:1;
            uint32_t  RES0_1:1;
            uint32_t  PRIbits:3;
            uint32_t  IDbits:3;
            uint32_t  SEIS:1;
            uint32_t  A3V:1;
            uint32_t  RES0_2:2;
            uint32_t  RSS:1;
            uint32_t  RES0_3:13;


    AS_MACRO RegICC_CTLR_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_CTLR_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_CTLR_EL1: ";
            kout
                << "CBPR = " << CBPR << ", "
                << "EOImode = " << EOImode << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "PMHE = " << PMHE << ", "
                << "RES0_1 = " << RES0_1 << ", "
                << "PRIbits = " << PRIbits << ", "
                << "IDbits = " << IDbits << ", "
                << "SEIS = " << SEIS << ", "
                << "A3V = " << A3V << ", "
                << "RES0_2 = " << RES0_2 << ", "
                << "RSS = " << RSS << ", "
                << "RES0_3 = " << RES0_3 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_CTLR_EL1 read()
    { 
        RegICC_CTLR_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_4\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_CTLR_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_4\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_CTLR_EL1 & setMandatoryFields()
    {
        CBPR = 0;
        EOImode = 0;
        RES0_0 = 0;
        PMHE = 0;
        RES0_1 = 0;
        PRIbits = 0;
        IDbits = 0;
        SEIS = 0;
        A3V = 0;
        RES0_2 = 0;
        RSS = 0;
        RES0_3 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_4,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_DIR_EL1 {
public:

            uint32_t  INTID:24;
            uint32_t  RES0_0:8;


    AS_MACRO RegICC_DIR_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_DIR_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_DIR_EL1: ";
            kout
                << "INTID = " << INTID << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_DIR_EL1 read()
    { 
        RegICC_DIR_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_11_1\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_DIR_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_11_1\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_DIR_EL1 & setMandatoryFields()
    {
        INTID = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_11_1,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_EOIR0_EL1 {
public:

            uint32_t  INTID:24;
            uint32_t  RES0_0:8;


    AS_MACRO RegICC_EOIR0_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_EOIR0_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_EOIR0_EL1: ";
            kout
                << "INTID = " << INTID << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_EOIR0_EL1 read()
    { 
        RegICC_EOIR0_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_8_1\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_EOIR0_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_8_1\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_EOIR0_EL1 & setMandatoryFields()
    {
        INTID = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_8_1,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_EOIR1_EL1 {
public:

            uint32_t  INTID:24;
            uint32_t  RES0_0:8;


    AS_MACRO RegICC_EOIR1_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_EOIR1_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_EOIR1_EL1: ";
            kout
                << "INTID = " << INTID << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_EOIR1_EL1 read()
    { 
        RegICC_EOIR1_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_1\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_EOIR1_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_1\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_EOIR1_EL1 & setMandatoryFields()
    {
        INTID = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_1,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_HPPIR0_EL1 {
public:

            uint32_t  INTID:24;
            uint32_t  RES0_0:8;


    AS_MACRO RegICC_HPPIR0_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_HPPIR0_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_HPPIR0_EL1: ";
            kout
                << "INTID = " << INTID << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_HPPIR0_EL1 read()
    { 
        RegICC_HPPIR0_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_8_2\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_HPPIR0_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_8_2\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_HPPIR0_EL1 & setMandatoryFields()
    {
        INTID = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_8_2,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_HPPIR1_EL1 {
public:

            uint32_t  INTID:24;
            uint32_t  RES0_0:8;


    AS_MACRO RegICC_HPPIR1_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_HPPIR1_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_HPPIR1_EL1: ";
            kout
                << "INTID = " << INTID << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_HPPIR1_EL1 read()
    { 
        RegICC_HPPIR1_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_2\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_HPPIR1_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_2\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_HPPIR1_EL1 & setMandatoryFields()
    {
        INTID = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_2,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_IAR0_EL1 {
public:

            uint32_t  INTID:24;
            uint32_t  RES0_0:8;


    AS_MACRO RegICC_IAR0_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_IAR0_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_IAR0_EL1: ";
            kout
                << "INTID = " << INTID << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_IAR0_EL1 read()
    { 
        RegICC_IAR0_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_8_0\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_IAR0_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_8_0\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_IAR0_EL1 & setMandatoryFields()
    {
        INTID = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_8_0,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_IAR1_EL1 {
public:

            uint32_t  INTID:24;
            uint32_t  RES0_0:8;


    AS_MACRO RegICC_IAR1_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_IAR1_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_IAR1_EL1: ";
            kout
                << "INTID = " << INTID << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_IAR1_EL1 read()
    { 
        RegICC_IAR1_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_0\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_IAR1_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_0\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_IAR1_EL1 & setMandatoryFields()
    {
        INTID = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_0,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_IGRPEN0_EL1 {
public:

            uint32_t  Enable:1;
            uint32_t  RES0_0:31;


    AS_MACRO RegICC_IGRPEN0_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_IGRPEN0_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_IGRPEN0_EL1: ";
            kout
                << "Enable = " << Enable << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_IGRPEN0_EL1 read()
    { 
        RegICC_IGRPEN0_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_6\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_IGRPEN0_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_6\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_IGRPEN0_EL1 & setMandatoryFields()
    {
        Enable = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_6,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_IGRPEN1_EL1 {
public:

            uint32_t  Enable:1;
            uint32_t  RES0_0:31;


    AS_MACRO RegICC_IGRPEN1_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_IGRPEN1_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_IGRPEN1_EL1: ";
            kout
                << "Enable = " << Enable << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_IGRPEN1_EL1 read()
    { 
        RegICC_IGRPEN1_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_7\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_IGRPEN1_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_7\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_IGRPEN1_EL1 & setMandatoryFields()
    {
        Enable = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_7,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_IGRPEN1_EL3 {
public:

            uint32_t  EnableGrp1NS:1;
            uint32_t  EnableGrp1S:1;
            uint32_t  RES0_0:30;


    AS_MACRO RegICC_IGRPEN1_EL3(uint32_t v)            {set(v);}
    AS_MACRO RegICC_IGRPEN1_EL3& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_IGRPEN1_EL3: ";
            kout
                << "EnableGrp1NS = " << EnableGrp1NS << ", "
                << "EnableGrp1S = " << EnableGrp1S << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_IGRPEN1_EL3 read()
    { 
        RegICC_IGRPEN1_EL3 res;
        __asm__ __volatile__("mrs %0,s3_6_c12_12_7\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_IGRPEN1_EL3 & update()
    {
        __asm__ __volatile__("mrs %0,s3_6_c12_12_7\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_IGRPEN1_EL3 & setMandatoryFields()
    {
        EnableGrp1NS = 0;
        EnableGrp1S = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_6_c12_12_7,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_PMR_EL1 {
public:

            uint32_t  Priortiy:8;
            uint32_t  RES0_0:24;


    AS_MACRO RegICC_PMR_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_PMR_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_PMR_EL1: ";
            kout
                << "Priortiy = " << Priortiy << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_PMR_EL1 read()
    { 
        RegICC_PMR_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c4_6_0\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_PMR_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c4_6_0\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_PMR_EL1 & setMandatoryFields()
    {
        Priortiy = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c4_6_0,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_RPR_EL1 {
public:

            uint32_t  Priortiy:8;
            uint32_t  RES0_0:24;


    AS_MACRO RegICC_RPR_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_RPR_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_RPR_EL1: ";
            kout
                << "Priortiy = " << Priortiy << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_RPR_EL1 read()
    { 
        RegICC_RPR_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_11_3\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_RPR_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_11_3\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_RPR_EL1 & setMandatoryFields()
    {
        Priortiy = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_11_3,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_SGI0R_EL1 {
public:

            uint32_t  TargetList:16;
            uint32_t  Aff1:8;
            uint32_t  INTID:4;
            uint32_t  RES0_0:4;
            uint32_t  Aff2:8;
            uint32_t  IRM:1;
            uint32_t  RES0_1:3;
            uint32_t  RS:4;
            uint32_t  Aff3:8;
            uint32_t  RES0_2:8;


    AS_MACRO RegICC_SGI0R_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_SGI0R_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }





    AS_MACRO RegICC_SGI0R_EL1 & setMandatoryFields()
    {
        TargetList = 0;
        Aff1 = 0;
        INTID = 0;
        RES0_0 = 0;
        Aff2 = 0;
        IRM = 0;
        RES0_1 = 0;
        RS = 0;
        Aff3 = 0;
        RES0_2 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_11_7,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_SGI1R_EL1 {
public:

            uint32_t  TargetList:16;
            uint32_t  Aff1:8;
            uint32_t  INTID:4;
            uint32_t  RES0_0:4;
            uint32_t  Aff2:8;
            uint32_t  IRM:1;
            uint32_t  RES0_1:3;
            uint32_t  RS:4;
            uint32_t  Aff3:8;
            uint32_t  RES0_2:8;


    AS_MACRO RegICC_SGI1R_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_SGI1R_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }





    AS_MACRO RegICC_SGI1R_EL1 & setMandatoryFields()
    {
        TargetList = 0;
        Aff1 = 0;
        INTID = 0;
        RES0_0 = 0;
        Aff2 = 0;
        IRM = 0;
        RES0_1 = 0;
        RS = 0;
        Aff3 = 0;
        RES0_2 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_11_5,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_SRE_EL1 {
public:

            uint32_t  SRE:1;
            uint32_t  DFB:1;
            uint32_t  DIB:1;
            uint32_t  RES0_0:29;


    AS_MACRO RegICC_SRE_EL1(uint32_t v)            {set(v);}
    AS_MACRO RegICC_SRE_EL1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_SRE_EL1: ";
            kout
                << "SRE = " << SRE << ", "
                << "DFB = " << DFB << ", "
                << "DIB = " << DIB << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_SRE_EL1 read()
    { 
        RegICC_SRE_EL1 res;
        __asm__ __volatile__("mrs %0,s3_0_c12_12_5\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_SRE_EL1 & update()
    {
        __asm__ __volatile__("mrs %0,s3_0_c12_12_5\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_SRE_EL1 & setMandatoryFields()
    {
        SRE = 0;
        DFB = 0;
        DIB = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_0_c12_12_5,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_SRE_EL2 {
public:

            uint32_t  SRE:1;
            uint32_t  DFB:1;
            uint32_t  DIB:1;
            uint32_t  RES0_0:29;


    AS_MACRO RegICC_SRE_EL2(uint32_t v)            {set(v);}
    AS_MACRO RegICC_SRE_EL2& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_SRE_EL2: ";
            kout
                << "SRE = " << SRE << ", "
                << "DFB = " << DFB << ", "
                << "DIB = " << DIB << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_SRE_EL2 read()
    { 
        RegICC_SRE_EL2 res;
        __asm__ __volatile__("mrs %0,s3_4_c12_9_5\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_SRE_EL2 & update()
    {
        __asm__ __volatile__("mrs %0,s3_4_c12_9_5\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_SRE_EL2 & setMandatoryFields()
    {
        SRE = 0;
        DFB = 0;
        DIB = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_4_c12_9_5,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));



class RegICC_SRE_EL3 {
public:

            uint32_t  SRE:1;
            uint32_t  DFB:1;
            uint32_t  DIB:1;
            uint32_t  RES0_0:29;


    AS_MACRO RegICC_SRE_EL3(uint32_t v)            {set(v);}
    AS_MACRO RegICC_SRE_EL3& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}
    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    }


    AS_MACRO void dump()const
    {
        kout << "RegICC_SRE_EL3: ";
            kout
                << "SRE = " << SRE << ", "
                << "DFB = " << DFB << ", "
                << "DIB = " << DIB << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "\n";
    }



    AS_MACRO static RegICC_SRE_EL3 read()
    { 
        RegICC_SRE_EL3 res;
        __asm__ __volatile__("mrs %0,s3_6_c12_12_5\n\t":"=r"(res));
        return res;
    }
    AS_MACRO RegICC_SRE_EL3 & update()
    {
        __asm__ __volatile__("mrs %0,s3_6_c12_12_5\n\t":"=r"(*this));
        return *this;
    }

    AS_MACRO RegICC_SRE_EL3 & setMandatoryFields()
    {
        SRE = 0;
        DFB = 0;
        DIB = 0;
        RES0_0 = 0;
        return *this;
    }
    
    AS_MACRO void write()const
    {
        __asm__ __volatile__("msr s3_6_c12_12_5,%0\n\t"::"r"(*this));
    }

}__attribute__((packed));




class RegGICR_CTLR {
public:
            uint32_t  EnableLPIs:1;
            uint32_t  RES0_0:2;
            uint32_t  RWP:1;
            uint32_t  RES0_1:20;
            uint32_t  DPG0:1;
            uint32_t  DPG1NS:1;
            uint32_t  DPG1S:1;
            uint32_t  RES0_2:4;
            uint32_t  UWP:1;

    AS_MACRO RegGICR_CTLR(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_CTLR& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_CTLR: ";
            kout
                << "EnableLPIs = " << EnableLPIs << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "RWP = " << RWP << ", "
                << "RES0_1 = " << RES0_1 << ", "
                << "DPG0 = " << DPG0 << ", "
                << "DPG1NS = " << DPG1NS << ", "
                << "DPG1S = " << DPG1S << ", "
                << "RES0_2 = " << RES0_2 << ", "
                << "UWP = " << UWP << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_CTLR& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_CTLR*>(addr);
    }
    AS_MACRO static RegGICR_CTLR& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_CTLR*>(addr);
    }

    AS_MACRO RegGICR_CTLR & setMandatoryFields()
    {
        EnableLPIs = 0;
        RES0_0 = 0;
        RWP = 0;
        RES0_1 = 0;
        DPG0 = 0;
        DPG1NS = 0;
        DPG1S = 0;
        RES0_2 = 0;
        UWP = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_WAKER {
public:
            volatile uint32_t  IMP_DEF_0:1;
            volatile uint32_t  ProcessorSleep:1;
            volatile uint32_t  ChildrenAsleep:1;
            volatile uint32_t  RES0_0:28;
            volatile uint32_t  IMP_DEF_1:1;

    AS_MACRO RegGICR_WAKER(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_WAKER& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_WAKER: ";
            kout
                << "IMP_DEF_0 = " << IMP_DEF_0 << ", "
                << "ProcessorSleep = " << ProcessorSleep << ", "
                << "ChildrenAsleep = " << ChildrenAsleep << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "IMP_DEF_1 = " << IMP_DEF_1 << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static volatile RegGICR_WAKER& of(size_t addr)
    { 
        return *reinterpret_cast<volatile RegGICR_WAKER*>(addr);
    }
    AS_MACRO static volatile RegGICR_WAKER& of(void* addr)
    { 
        return *reinterpret_cast<volatile RegGICR_WAKER*>(addr);
    }
    AS_MACRO static volatile RegGICR_WAKER& of(volatile void * addr)
    {
        return *reinterpret_cast<volatile RegGICR_WAKER*>(addr);
    }

    AS_MACRO volatile RegGICR_WAKER & setMandatoryFields()
    {
        IMP_DEF_0 = 0;
        ProcessorSleep = 0;
        ChildrenAsleep = 0;
        RES0_0 = 0;
        IMP_DEF_1 = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_IGROUPR0 {
public:
            uint32_t  InGrp:32;

    AS_MACRO RegGICR_IGROUPR0(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_IGROUPR0& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_IGROUPR0: ";
            kout
                << "InGrp = " << InGrp << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_IGROUPR0& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_IGROUPR0*>(addr);
    }
    AS_MACRO static RegGICR_IGROUPR0& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_IGROUPR0*>(addr);
    }

    AS_MACRO RegGICR_IGROUPR0 & setMandatoryFields()
    {
        InGrp = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_ISENABLER0 {
public:
            uint32_t  Enables:32;

    AS_MACRO RegGICR_ISENABLER0(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_ISENABLER0& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_ISENABLER0: ";
            kout
                << "Enables = " << Hex(Enables) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_ISENABLER0& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_ISENABLER0*>(addr);
    }
    AS_MACRO static RegGICR_ISENABLER0& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_ISENABLER0*>(addr);
    }

    AS_MACRO RegGICR_ISENABLER0 & setMandatoryFields()
    {
        Enables = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICD_IIDR {
public:
            uint32_t  Implementer:12;
            uint32_t  Revision:4;
            uint32_t  Variant:4;
            uint32_t  RES0_0:4;
            uint32_t  ProductID:8;

    AS_MACRO RegGICD_IIDR(uint32_t v)            {set(v);}
    AS_MACRO RegGICD_IIDR& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICD_IIDR: ";
            kout
                << "Implementer = " << Implementer << ", "
                << "Revision = " << Revision << ", "
                << "Variant = " << Variant << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "ProductID = " << ProductID << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICD_IIDR& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICD_IIDR*>(addr);
    }
    AS_MACRO static RegGICD_IIDR& of(void* addr)
    { 
        return *reinterpret_cast<RegGICD_IIDR*>(addr);
    }

    AS_MACRO RegGICD_IIDR & setMandatoryFields()
    {
        Implementer = 0;
        Revision = 0;
        Variant = 0;
        RES0_0 = 0;
        ProductID = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_ICENABLER0 {
public:
            uint32_t  ClearEnables:32;

    AS_MACRO RegGICR_ICENABLER0(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_ICENABLER0& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_ICENABLER0: ";
            kout
                << "ClearEnables = " << Hex(ClearEnables) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_ICENABLER0& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_ICENABLER0*>(addr);
    }
    AS_MACRO static RegGICR_ICENABLER0& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_ICENABLER0*>(addr);
    }

    AS_MACRO RegGICR_ICENABLER0 & setMandatoryFields()
    {
        ClearEnables = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_ISPENDR0 {
public:
            uint32_t  Pendings:32;

    AS_MACRO RegGICR_ISPENDR0(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_ISPENDR0& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_ISPENDR0: ";
            kout
                << "Pendings = " << Hex(Pendings) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_ISPENDR0& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_ISPENDR0*>(addr);
    }
    AS_MACRO static RegGICR_ISPENDR0& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_ISPENDR0*>(addr);
    }

    AS_MACRO RegGICR_ISPENDR0 & setMandatoryFields()
    {
        Pendings = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_ISACTIVER0 {
public:
            uint32_t  Actives:32;

    AS_MACRO RegGICR_ISACTIVER0(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_ISACTIVER0& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_ISACTIVER0: ";
            kout
                << "Actives = " << Hex(Actives) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_ISACTIVER0& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_ISACTIVER0*>(addr);
    }
    AS_MACRO static RegGICR_ISACTIVER0& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_ISACTIVER0*>(addr);
    }

    AS_MACRO RegGICR_ISACTIVER0 & setMandatoryFields()
    {
        Actives = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_ICFGR0 {
public:
            uint32_t  Configs:32;

    AS_MACRO RegGICR_ICFGR0(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_ICFGR0& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_ICFGR0: ";
            kout
                << "Configs = " << Hex(Configs) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_ICFGR0& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_ICFGR0*>(addr);
    }
    AS_MACRO static RegGICR_ICFGR0& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_ICFGR0*>(addr);
    }

    AS_MACRO RegGICR_ICFGR0 & setMandatoryFields()
    {
        Configs = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_ICFGR1 {
public:
            uint32_t  Configs:32;

    AS_MACRO RegGICR_ICFGR1(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_ICFGR1& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_ICFGR1: ";
            kout
                << "Configs = " << Hex(Configs) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_ICFGR1& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_ICFGR1*>(addr);
    }
    AS_MACRO static RegGICR_ICFGR1& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_ICFGR1*>(addr);
    }

    AS_MACRO RegGICR_ICFGR1 & setMandatoryFields()
    {
        Configs = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_ICACTIVER0 {
public:
            uint32_t  Actives:32;

    AS_MACRO RegGICR_ICACTIVER0(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_ICACTIVER0& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_ICACTIVER0: ";
            kout
                << "Actives = " << Hex(Actives) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_ICACTIVER0& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_ICACTIVER0*>(addr);
    }
    AS_MACRO static RegGICR_ICACTIVER0& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_ICACTIVER0*>(addr);
    }

    AS_MACRO RegGICR_ICACTIVER0 & setMandatoryFields()
    {
        Actives = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICR_IPRIORITYR {
public:
            uint32_t  p0:8;
            uint32_t  p1:8;
            uint32_t  p2:8;
            uint32_t  p3:8;

    AS_MACRO RegGICR_IPRIORITYR(uint32_t v)            {set(v);}
    AS_MACRO RegGICR_IPRIORITYR& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICR_IPRIORITYR: ";
            kout
                << "p0 = " << p0 << ", "
                << "p1 = " << p1 << ", "
                << "p2 = " << p2 << ", "
                << "p3 = " << p3 << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICR_IPRIORITYR& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICR_IPRIORITYR*>(addr);
    }
    AS_MACRO static RegGICR_IPRIORITYR& of(void* addr)
    { 
        return *reinterpret_cast<RegGICR_IPRIORITYR*>(addr);
    }

    AS_MACRO RegGICR_IPRIORITYR & setMandatoryFields()
    {
        p0 = 0;
        p1 = 0;
        p2 = 0;
        p3 = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICD_ISENABLER {
public:
            uint32_t  Enables:32;

    AS_MACRO RegGICD_ISENABLER(uint32_t v)            {set(v);}
    AS_MACRO RegGICD_ISENABLER& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICD_ISENABLER: ";
            kout
                << "Enables = " << Hex(Enables) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICD_ISENABLER& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICD_ISENABLER*>(addr);
    }
    AS_MACRO static RegGICD_ISENABLER& of(void* addr)
    { 
        return *reinterpret_cast<RegGICD_ISENABLER*>(addr);
    }

    AS_MACRO RegGICD_ISENABLER & setMandatoryFields()
    {
        Enables = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICD_ISPENDR {
public:
            uint32_t  Pendings:32;

    AS_MACRO RegGICD_ISPENDR(uint32_t v)            {set(v);}
    AS_MACRO RegGICD_ISPENDR& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICD_ISPENDR: ";
            kout
                << "Pendings = " << Hex(Pendings) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICD_ISPENDR& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICD_ISPENDR*>(addr);
    }
    AS_MACRO static RegGICD_ISPENDR& of(void* addr)
    { 
        return *reinterpret_cast<RegGICD_ISPENDR*>(addr);
    }

    AS_MACRO RegGICD_ISPENDR & setMandatoryFields()
    {
        Pendings = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICD_ISACTIVER {
public:
            uint32_t  Actives:32;

    AS_MACRO RegGICD_ISACTIVER(uint32_t v)            {set(v);}
    AS_MACRO RegGICD_ISACTIVER& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICD_ISACTIVER: ";
            kout
                << "Actives = " << Hex(Actives) << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICD_ISACTIVER& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICD_ISACTIVER*>(addr);
    }
    AS_MACRO static RegGICD_ISACTIVER& of(void* addr)
    { 
        return *reinterpret_cast<RegGICD_ISACTIVER*>(addr);
    }

    AS_MACRO RegGICD_ISACTIVER & setMandatoryFields()
    {
        Actives = 0;
        return *this;
    }

}__attribute__((packed));




class RegGICD_CTLR {
public:
            uint32_t  EnableGrp0:1;
            uint32_t  EnableGrp1NS:1;
            uint32_t  EnableGrp1S:1;
            uint32_t  RES0_0:1;
            uint32_t  ARE_S:1;
            uint32_t  ARE_NS:1;
            uint32_t  DS:1;
            uint32_t  E1NWF:1;
            uint32_t  RES0_1:23;
            uint32_t  RWP:1;

    AS_MACRO RegGICD_CTLR(uint32_t v)            {set(v);}
    AS_MACRO RegGICD_CTLR& operator=(uint32_t v) {set(v);return *this;}
    AS_MACRO void set(uint32_t v) { *reinterpret_cast<uint32_t*>(this)=v;}

    AS_MACRO void dump()const
    {
        kout << "RegGICD_CTLR: ";
            kout
                << "EnableGrp0 = " << EnableGrp0 << ", "
                << "EnableGrp1NS = " << EnableGrp1NS << ", "
                << "EnableGrp1S = " << EnableGrp1S << ", "
                << "RES0_0 = " << RES0_0 << ", "
                << "ARE_S = " << ARE_S << ", "
                << "ARE_NS = " << ARE_NS << ", "
                << "DS = " << DS << ", "
                << "E1NWF = " << E1NWF << ", "
                << "RES0_1 = " << RES0_1 << ", "
                << "RWP = " << RWP << ", "
                << "\n";
    }

    AS_MACRO uint32_t  get()const 
    {
        return *reinterpret_cast<uint32_t*>(this);
    } 
    AS_MACRO static RegGICD_CTLR& of(size_t addr)
    { 
        return *reinterpret_cast<RegGICD_CTLR*>(addr);
    }
    AS_MACRO static RegGICD_CTLR& of(void* addr)
    { 
        return *reinterpret_cast<RegGICD_CTLR*>(addr);
    }

    AS_MACRO RegGICD_CTLR & setMandatoryFields()
    {
        EnableGrp0 = 0;
        EnableGrp1NS = 0;
        EnableGrp1S = 0;
        RES0_0 = 0;
        ARE_S = 0;
        ARE_NS = 0;
        DS = 0;
        E1NWF = 0;
        RES0_1 = 0;
        RWP = 0;
        return *this;
    }

}__attribute__((packed));

#endif //__INCLUDE_ARCH_COMMON_AARCH64_REGISTERS_GICV3_REGISTERS_H__
